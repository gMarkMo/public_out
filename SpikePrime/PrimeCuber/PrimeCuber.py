#-----------------------------------------------------------------------------
# Title:        PrimeCuber
#
# Author:       David Gilday
#
# Copyright:    (C) 2021-2023 David Gilday
#
# Website:      http://mindcuber.com
#
# Version:      v2p1
#
# Modified:     $Date: 2023-07-07 20:27:08 +0100 (Fri, 07 Jul 2023) $
#
# Revision:     $Revision: 7973 $
#
# Usage:
#
#   This software may be used for any non-commercial purpose providing
#   that the original author is acknowledged.
#
# Disclaimer:
#
#   This software is provided 'as is' without warranty of any kind, either
#   express or implied, including, but not limited to, the implied warranties
#   of fitness for a purpose, or the warranty of non-infringement.
#-----------------------------------------------------------------------------


import gc, os, time, hub

hub.light_matrix.show_image(42)

print("\nPrimeCuber v2p1")
print("===============")
print("Copyright 2021-2023 David Gilday")
print("http://mindcuber.com\n")

def fatal_error(msg):
    print("ERROR: "+msg)
    raise SystemExit

def trace(msg):
    if False:
        gc.collect()
        print("TRACE: "+msg+" mem="+str(gc.mem_free()))

#-----------------------------------------------------------------------------

MAXINT = 0x7FFFFFFF

MV_MAX = 80
MV_TGT = 33

import random

trace("class cube")
class cube():

    colors = None

    def __init__(self):
        self.mv_n    = 0
        self.quick    = False
        self.end_time = 0
        self.pce    = [0] * NFACE
        for f in range(NFACE):
            self.pce[f] = [f] * (2*NSIDE)
        self.mv_f    = [0] * MV_MAX
        self.mv_r    = [0] * MV_MAX
        self.col    = ['w', 'g', 'y', 'b', 'r', 'o']
        self.colors= None
        # pre-allocate for speed
        self.tmp_f    = [0] * cube_mtab.MV_MENT
        self.tmp_r    = [0] * cube_mtab.MV_MENT
        self.tmp_mi= cube_idx()

    def reset_state(self):
        for f in range(NFACE):
            for o in range(2*NSIDE):
                self.pce[f][o] = f

    def alloc_colors(self):
        if self.colors == None:
            self.colors = cube_colors(self)
            self.valc = [0] * NFACE
            self.vale = [0] * NFACE
            for f in range(NFACE):
                self.valc[f] = [False] * NFACE
                self.vale[f] = [False] * NFACE

    def copy(self, m):
        for f in range(NFACE):
            for i in range(2*NSIDE):
                self.pce[f][i] = m.pce[f][i]

    def copy_moves(self, m):
        self.mv_n = m.mv_n
        for i in range(self.mv_n):
            self.mv_f[i] = m.mv_f[i]
            self.mv_r[i] = m.mv_r[i]

    def corner(self, f0, f1):
        return self.pce[f0][cm.corner(f0, f1)]

    def edge(self, f0, f1):
        return self.pce[f0][cm.edge(f0, f1)]

    def rot(self, f, r):
        r= RMOD(r)
        p0 = self.pce[f]
        fd = cm.dir(f, NSIDE_M1)
        while r > 0:
            r-= 1
            p= p0[6]; p0[6] = p0[4]; p0[4] = p0[2]; p0[2] = p0[0]; p0[0] = p
            p= p0[7]; p0[7] = p0[5]; p0[5] = p0[3]; p0[3] = p0[1]; p0[1] = p
            pd= self.pce[fd]
            od2 = cm.corner(fd, f)
            od0 = (od2-2)&7
            c0= pd[od0]
            e0= pd[od0+1]
            c1= pd[od2]
            for d in range(NSIDE-2, -1, -1):
                fs= cm.dir(f, d)
                os2 = cm.corner(fs, f)
                os0 = (os2-2)&7
                ps= self.pce[fs]
                pd[od0]= ps[os0]
                pd[od0+1] = ps[os0+1]
                pd[od2]= ps[os2]
                pd= ps
                od0 = os0
                od2 = os2
            # }
            pd[od0]= c0
            pd[od0+1] = e0
            pd[od2]= c1

    def backtrack_a(self, f):
        i = self.mv_n
        btrack = False
        while (i > 0):
            i -= 1
            fi = self.mv_f[i]
            if cm.adjacent(f, fi):
                break
            if f <= fi:
                btrack = True
                break
        # }
        return btrack

    def add_mv(self, f, r):
        i = self.mv_n
        mrg = False
        while (i > 0):
            i -= 1
            fi = self.mv_f[i]
            if cm.adjacent(f, fi):
                break
            if f == fi:
                r += self.mv_r[i]
                r = RFIX(r)
                if r != 0:
                    self.mv_r[i] = r
                else:
                    self.mv_n -= 1
                    while (i < self.mv_n):
                        self.mv_f[i] = self.mv_f[i+1]
                        self.mv_r[i] = self.mv_r[i+1]
                        i += 1
                    # }
                # }
                mrg = True
                break
            # }
        # }
        if not mrg:
            self.mv_f[self.mv_n] = f
            self.mv_r[self.mv_n] = RFIX(r)
            self.mv_n += 1
        # }

    def move(self, f, r):
        self.rot(f, r)
        self.add_mv(f, r)

    def valid_pieces(self):
        for f0 in range(NFACE):
            for f1 in range(NFACE):
                adj = cm.adjacent(f0, f1)
                self.valc[f0][f1] = adj
                self.vale[f0][f1] = adj
        for f0 in range(0, 3, 2):
            for f1 in range(NFACE):
                if cm.adjacent(f0, f1):
                    f2 = cm.get_remap(f0, f1).fm[5]
                    c0 = self.corner(f0, f1)
                    c1 = self.corner(f1, f2)
                    invalid = True
                    if self.valc[c0][c1]:
                        c2 = self.corner(f2, f0)
                        if c2 == cm.get_remap(c0, c1).fm[5]:
                            self.valc[c0][c1] = False
                            self.valc[c1][c2] = False
                            self.valc[c2][c0] = False
                            invalid = False
                    if invalid:
                        return False
            # }
        # }
        for f0 in range(1, NFACE):
            for f1 in range(f0):
                if cm.adjacent(f0, f1):
                    e0 = self.edge(f0, f1)
                    e1 = self.edge(f1, f0)
                    if self.vale[e0][e1]:
                        self.vale[e0][e1] = False
                        self.vale[e1][e0] = False
                    else:
                        return False
            # }
        # }
        return True

    def valid_positions(self):
        self.valid = False
        self.solve(0)
        return self.valid

    def solved(self):
        slvd = True
        f = 0
        while (slvd and f < NFACE):
            for p in range(2*NSIDE):
                if self.pce[f][p] != f:
                    slvd = False
                    break
            # }
            f += 1
        # }
        return slvd

    def timeout(self):
        return time.ticks_ms() >= self.end_time

    def solve_remap(self, best, s0, check = False):
        slvd = True
        for s in range(s0, solve_map.NSTAGE):
            mi = self.tmp_mi
            mi.init(self)
            i = mi.index(s)
            if i != 0:
                f = self.tmp_f
                r = self.tmp_r
                n = mt[s].moves(i, f, r)
                if n > 0:
                    mv = self.mv_n + n
                    for j in range(n):
                        self.add_mv(f[j], r[j])
                    # }
                    if (self.mv_n > best or
                        (s == 0 and self.mv_n < mv)):
                        slvd = False
                        break
                    # }
                    if s < (solve_map.NSTAGE-1) or check:
                        for j in range(n):
                            self.rot(f[j], r[j])
                    # }
                else:
                    slvd = False
                    break
                # }
            # }
        # }
        self.valid = check and slvd and self.solved()
        return slvd

    def solve_one(self, cb, cs, depth):
        slvd = False
        if self.mv_n < depth:
            f = 0
            while (not slvd and f < NFACE):
                if not self.backtrack_a(f):
                    n = self.mv_n+1
                    for i in range(1, NSIDE):
                        self.move(f, 1)
                        if not slvd and self.solve_one(cb, cs, depth):
                            slvd = True
                    # }
                    self.move(f, 1)
                # }
                f += 1
            # }
        else:
            # print("solve_one: quick="+str(cb.quick))
            cs.copy(self)
            cs.copy_moves(self)
            cs.end_time = cb.end_time
            if cs.solve_remap(cb.mv_n, 0, cb.quick):
                cb.valid = cs.valid
                if cs.mv_n < cb.mv_n:
                    # print("solve_one: solved="+str(cs.mv_n))
                    cb.copy_moves(cs)
                # }
            # }
            # finish if a short solution has been found or if any solution
            # has been found and the timeout has expired or if only a quick
            # solve is required
            if cb.mv_n <= MV_TGT or (cb.mv_n <= MV_MAX and (cb.quick or cb.timeout())):
                trace("solved_one()")
                slvd = True
        return slvd

    def solve(self, msecs = 1000):
        start_time = time.ticks_ms()
        self.mv_n = MAXINT
        self.end_time = start_time + msecs
        self.quick = (msecs == 0)
        cw = cube()
        cw.copy(self)
        cs = cube()
        depth = 0
        while (not cw.solve_one(self, cs, depth)):
            depth += 1
        # print("Moves: "+str(self.mv_n)+" "+
        #    "Time: "+str(int(time.ticks_ms() - start_time))+"ms ")

    def solve_apply(self):
        for i in range(self.mv_n):
            self.rot(self.mv_f[i], self.mv_r[i])

    def scramble(self, msecs = 1000):
        self.reset_state()
        # Generate a random state by randomly exchanging pairs of edge and corner
        # pieces of a solved cube similar to WCA scramble regulations
        # Note: the random state may be impossible to solve but the solve algorithm
        # will solve as many as possible so is equivalent to generating a legal state
        for i in range(NEDGE-1):
            f0 = sm.ep0[i]
            f1 = sm.ep1[i]
            o0 = cm.edge(f0, f1)
            o1 = cm.edge(f1, f0)
            j= random.randint(i, NEDGE-1)
            f2 = sm.ep0[j]
            f3 = sm.ep1[j]
            if random.randint(0, 1) == 1:
                f2, f3 = (f3, f2)
            o2 = cm.edge(f2, f3)
            o3 = cm.edge(f3, f2)
            self.pce[f0][o0], self.pce[f1][o1], self.pce[f2][o2], self.pce[f3][o3] = (
                self.pce[f2][o2], self.pce[f3][o3], self.pce[f0][o0], self.pce[f1][o1]
                )
        for i in range(NCORNER-1):
            f0 = sm.cp0[i]
            f1 = sm.cp1[i]
            f2 = sm.cp2[i]
            o0 = cm.corner(f0, f1)
            o1 = cm.corner(f1, f2)
            o2 = cm.corner(f2, f0)
            j= random.randint(i, NCORNER-1)
            f3 = sm.cp0[j]
            f4 = sm.cp1[j]
            f5 = sm.cp2[j]
            for r in range(random.randint(0, 2)):
                f3, f4, f5 = (f4, f5, f3)
            o3 = cm.corner(f3, f4)
            o4 = cm.corner(f4, f5)
            o5 = cm.corner(f5, f3)
            self.pce[f0][o0], self.pce[f1][o1], self.pce[f2][o2], self.pce[f3][o3], self.pce[f4][o4], self.pce[f5][o5] = (
                self.pce[f3][o3], self.pce[f4][o4], self.pce[f5][o5], self.pce[f0][o0], self.pce[f1][o1], self.pce[f2][o2]
                )
        # Solve the cube and use the solution as the scramble sequence
        # Note: this is the inverse of the scramble sequence for randomly
        # generated state but the result is equivalently random
        self.solve(msecs)
        # Apply the scramble sequence to a solved cube to get a scrambled state
        self.reset_state()
        self.solve_apply()
        # print("Scramble moves:", self.mv_n)
        # self.display()

    def set_rgb(self, f, o, rgb):
        self.colors.set_rgb(f, o, rgb)

    def get_clr(self, f, o):
        return self.colors.get_clr(f, o)

    def determine_colors(self, t):
        return self.colors.determine_colors(t)

    def display_three(self, f, a, b, c):
        s = self.col[self.pce[f][a]] + " "
        if b == 8:
            s += self.col[f]
        else:
            s += self.col[self.pce[f][b]]
        return s + " " + self.col[self.pce[f][c]]

    def display_line(self, f, l):
        if (l == 0):
            s = self.display_three(f, 2, 3, 4)
        elif (l == 1):
            s = self.display_three(f, 1, 8, 5)
        else:
            s = self.display_three(f, 0, 7, 6)
        return s

    def display(self):
        for l in range(3):
            print("      " + self.display_line(4, l))
        for l in range(3):
            print(self.display_line(0, l) + " " +
                  self.display_line(1, l) + " " +
                  self.display_line(2, l) + " " +
                  self.display_line(3, l))
        for l in range(3):
            print("      " + self.display_line(5, l))

#-----------------------------------------------------------------------------

NFACE = 6

def POS(f, o):
    return f*9+o

trace("class cube_colors")
class cube_colors():

    def __init__(self, cb):
        self.cb   = cb
        self.clrs = []
        for i in range(NFACE*9):
            self.clrs.append(color())

    def set_col(self, f, o, c):
        self.cb.pce[f][o] = c

    def clr_ratio(self, c0, c1):
        ratio = 0
        if c0 < c1:
            ratio = -(2000*(c1-c0)//(c1+c0))
        elif c0 > c1:
            ratio =(2000*(c0-c1)//(c1+c0))
        return ratio

    def cmp_h(self, c0, c1):
        return c1.h > c0.h

    def cmp_sl(self, c0, c1):
        return c1.sl > c0.sl

    def cmp_slr(self, c0, c1):
        return c1.sl < c0.sl

    def cmp_l(self, c0, c1):
        return c1.l > c0.l

    def cmp_lr(self, c0, c1):
        return c1.l < c0.l

    def cmp_r_g(self, c0, c1):
        return self.clr_ratio(c1.r, c1.g) < self.clr_ratio(c0.r, c0.g)

    def cmp_b_r(self, c0, c1):
        return self.clr_ratio(c1.b, c1.r) < self.clr_ratio(c0.b, c0.r)

    def cmp_b_g(self, c0, c1):
        return self.clr_ratio(c1.b, c1.g) < self.clr_ratio(c0.b, c0.g)

    def sort_clrs(self, co, b, n, cmp_fn):
        e = b+n
        for i in range(b+1, e):
            ib = b
            ie = i
            ci = co[i]
            while ib < ie:
                ip = (ib+ie)//2
                if cmp_fn(self.clrs[ci], self.clrs[co[ip]]):
                    ie = ip
                else:
                    ib = ip + 1
            # }
            ie = i
            while ie > ib:
                co[ie] = co[ie-1]
                ie -= 1
            # }
            co[ie] = ci
        # }

    def sort_colors(self, co, t, s):
        if t < 6:
            # Lightness
            self.sort_clrs(co, 0, 6*s, self.cmp_lr)
            # Saturation
            self.sort_clrs(co, 0, 3*s, self.cmp_sl)
        else:
            # Saturation
            self.sort_clrs(co, 0, 6*s, self.cmp_sl)
        # }
        # Hue
        self.sort_clrs(co, s, 5*s, self.cmp_h)
        # Red/Orange
        cmp_fn = (None,
                  self.cmp_r_g,
                  self.cmp_b_g,
                  self.cmp_b_r,
                  self.cmp_slr,
                  self.cmp_l)[t % 6]
        if cmp_fn != None:
            self.sort_clrs(co, s, 2*s, cmp_fn)
        i = 0
        while i < 1*s:
            self.clrs[co[i]].clr = 0
            i += 1
        while i < 2*s:
            self.clrs[co[i]].clr = 4
            i += 1
        while i < 3*s:
            self.clrs[co[i]].clr = 5
            i += 1
        while i < 4*s:
            self.clrs[co[i]].clr = 2
            i += 1
        while i < 5*s:
            self.clrs[co[i]].clr = 1
            i += 1
        while i < 6*s:
            self.clrs[co[i]].clr = 3
            i += 1

    def determine_colors(self, t):
        clr_ord = [0] * (NFACE*4)
        for i in range(NFACE):
            clr_ord[i] = POS(i, 8)
        self.sort_colors(clr_ord, t, 1)
        for i in range(NFACE):
            clr_ord[4*i+0] = POS(i, 0)
            clr_ord[4*i+1] = POS(i, 2)
            clr_ord[4*i+2] = POS(i, 4)
            clr_ord[4*i+3] = POS(i, 6)
        # }
        self.sort_colors(clr_ord, t, 4)
        for i in range(NFACE):
            clr_ord[4*i+0] = POS(i, 1)
            clr_ord[4*i+1] = POS(i, 3)
            clr_ord[4*i+2] = POS(i, 5)
            clr_ord[4*i+3] = POS(i, 7)
        # }
        self.sort_colors(clr_ord, t, 4)
        clr_map = [0] * NFACE
        for f in range(NFACE):
            clr_map[self.clrs[POS(f, 8)].clr] = f
        col = self.cb.col
        col[clr_map[0]] = 'w'
        col[clr_map[1]] = 'g'
        col[clr_map[2]] = 'y'
        col[clr_map[3]] = 'b'
        col[clr_map[4]] = 'r'
        col[clr_map[5]] = 'o'
        for f in range(NFACE):
            for o in range(8):
                self.set_col(f, o, clr_map[self.clrs[POS(f, o)].clr])
        # }
        return self.cb.valid_pieces()

    def set_rgb(self, f, o, rgb):
        self.clrs[POS(f, o)].set_rgb(rgb[0], rgb[1], rgb[2])

    def get_clr(self, f, o):
        clr = self.clrs[POS(f, o)]
        c = 8 # white
        if clr.sl > 50:
            c = 8*clr.h//CMAX
        return c

#    def str3(self, s):
#        return (""+str(s))[-3:]
#
#    def hsl(self, f, o):
#        c = self.clrs[POS(f,o)]
#        if o == 8:
#            p = f;
#        else:
#            p = c.pce[f][o];
#        return "["+str(p)+":"+self.str3(c.r)+" "+self.str3(c.g)+" "+self.str3(c.b)+":"+self.str3(c.h)+" "+self.str3(c.sl)+" "+self.str3(c.l)+"]"
#
#    def display_line(self, f, l):
#        if l == 0:
#            s = self.hsl(f,2)+" "+self.hsl(f,3)+" "+self.hsl(f,4)
#        elif l == 1:
#            s = self.hsl(f,1)+" "+self.hsl(f,8)+" "+self.hsl(f,5)
#        else:
#            s = self.hsl(f,0)+" "+self.hsl(f,7)+" "+self.hsl(f,6)
#        return s
#
#    def display(self):
#        for l in range(3):
#            print((" "*84)+self.display_line(4, l))
#        for l in range(3):
#            print(self.display_line(0, l)+" "+
#                self.display_line(1, l)+" "+
#                self.display_line(2, l)+" "+
#                self.display_line(3, l))
#        for l in range(3):
#            print((" "*84)+self.display_line(5, l))

#-----------------------------------------------------------------------------
# Purpose:    Color module for PrimeCuber robot
#-----------------------------------------------------------------------------

CMAX = 1024

trace("class color")
class color():

    def __init__(self):
        self.set_rgb(0, 0, 0)

    def set_rgb(self, r, g, b):
        # Convert to hsl
        h  = 0
        s  = 0
        sl = 0
        l  = 0
        v  = r
        if g > v:
            v = g
        if b > v:
            v = b
        m = r
        if g < m:
            m = g
        if b < m:
            m = b
        vf = v+m
        l = vf//2
        if l > 0:
            vm = v-m
            if vm > 0:
                if vf <= CMAX:
                    vf = 2*CMAX-vf
                s = CMAX*vm//vf
                if r == v:
                    h = 0*CMAX+CMAX*(g-b)//vm
                elif g == v:
                    h = 2*CMAX+CMAX*(b-r)//vm
                else:
                    h = 4*CMAX+CMAX*(r-g)//vm
            h += CMAX # rotate so R/B either side of 0
            h = h//6
            if h < 0:
                h += CMAX
            elif h >= CMAX:
                h -= CMAX
            # Emphasize low saturation for bright colors (e.g. white)
            sl = CMAX*s//l
        # }
        self.r  = r
        self.g  = g
        self.b  = b
        self.h  = h
        self.sl = sl
        self.l  = l

#-----------------------------------------------------------------------------
# Purpose:    Cube mapping module for PrimeCuber robot
#-----------------------------------------------------------------------------

NFACE    = 6
NSIDE    = 4
NSIDE_M1 = NSIDE-1

def RMOD(r):
    return r & NSIDE_M1

#-----------------------------------------------------------------------------

trace("class remap")
class remap():

    def __init__(self):
        self.fm = [-1] * NFACE
        self.rm = [-1] * NFACE

    def init_maps(self, f, r):
        self.fm[f] = r
        self.rm[r] = f

#-----------------------------------------------------------------------------

trace("class face_map")
class face_map():

    def __init__(self):
        self.face        = -1
        self.face_edge   = [-1] * NFACE
        self.face_corner = [-1] * NFACE

    def init(self, f, f0, f1, f2, f3):
        self.face = f
        self.fce  = [f0, f1, f2, f3]

    def init_rest(self):
        for d in range(NSIDE):
            f = self.fce[d].face
            self.face_edge[f]   = 2*d+1
            self.face_corner[f] = (self.face_edge[f]+1)&(2*NSIDE-1)

    def dir1(self, d):
        return self.fce[d].face

    def dir(self, f, d):
        fd = -1
        for i in range(NSIDE):
            if self.fce[i].face == f:
                m = self.fce[i]
                for j in range(NSIDE):
                    if m.fce[j].face == self.face:
                        fd = m.fce[RMOD(j+d)].face
                        break
                break
        return fd

#-----------------------------------------------------------------------------

trace("class cube_map")
class cube_map():

    def __init__(self):
        self.map = []
        self.rm  = []
        self.dst = []
        for i in range(NFACE):
            self.map.append(face_map())
            self.rm.append([])
            self.dst.append([-1] * NFACE)
            for j in range(NFACE):
                self.rm[i].append(remap())
        self.map[0].init(0, self.map[3], self.map[4], self.map[1], self.map[5])
        self.map[1].init(1, self.map[0], self.map[4], self.map[2], self.map[5])
        self.map[2].init(2, self.map[1], self.map[4], self.map[3], self.map[5])
        self.map[3].init(3, self.map[2], self.map[4], self.map[0], self.map[5])
        self.map[4].init(4, self.map[0], self.map[3], self.map[2], self.map[1])
        self.map[5].init(5, self.map[0], self.map[1], self.map[2], self.map[3])
        for i in range(NFACE):
            self.map[i].init_rest()
        for f0 in range(NFACE):
            for f1 in range(NFACE):
                self.dst[f0][f1] = 2
        ff0 = 0
        for fr0 in range(NFACE):
            self.dst[fr0][fr0] = 0
            for d0 in range(NSIDE):
                ff1 = 1
                fr1 = self.map[fr0].dir1(d0)
                self.dst[fr0][fr1] = 1
                for d1 in range(NSIDE):
                    ff2 = self.map[ff0].dir(ff1, d1)
                    fr2 = self.map[fr0].dir(fr1, d1)
                    for d2 in range(NSIDE):
                        ff3 = self.map[ff1].dir(ff2, d2)
                        fr3 = self.map[fr1].dir(fr2, d2)
                        self.rm[fr0][fr1].init_maps(ff3, fr3)

    def dir(self, f, d):
        return self.map[f].dir1(d)

    def adjacent(self, f0, f1):
        return self.dst[f0][f1] == 1

    def edge(self, f0, f1):
        return self.map[f0].face_edge[f1]

    def corner(self, f0, f1):
        return self.map[f0].face_corner[f1]

    def get_remap(self, f0, f1):
        return self.rm[f0][f1]

#-----------------------------------------------------------------------------
# Purpose:    Rubik's Cube solver for PrimeCuber robot
#-----------------------------------------------------------------------------

NFACE    = 6
NSIDE    = 4
NSIDE_M1 = NSIDE-1
NCORNER  = NFACE*NSIDE//3
NEDGE    = NFACE*NSIDE//2

def RMOD(r):
    return r & NSIDE_M1

def RFIX(r):
    return ((r+1) & NSIDE_M1)-1

def POS(f, o):
    return f*9+o

#-----------------------------------------------------------------------------

large = False

# Use large tables if they have been downloaded
try:
    fname_tab4 = "/flash/pcmtab4_v2p1.bin"
    large = os.stat(fname_tab4)[6] == 2561877
except:
    None

if large:
    # Large tables
    trace("class cube_mtab4")
    class cube_mtab4:

        NSTAGE = 4    # Number of stages in solve
        NPIECE = 4    # Maximum number of corners/edges per stage

        def init(c):
            # 0
            s = c.stage(0)
            c.adde(s, 0, 1)
            c.adde(s, 0, 4)
            c.adde(s, 1, 4)
            c.addc(s, 0, 4, 1)
            c.send(s)

            # 1
            s = c.stage(s)
            c.adde(s, 0, 3)
            c.adde(s, 0, 5)
            c.adde(s, 5, 1)
            c.addc(s, 0, 1, 5)
            c.send(s)

            # 2
            s = c.stage(s)
            c.adde(s, 3, 5)
            c.adde(s, 4, 3)
            c.addc(s, 0, 3, 4)
            c.addc(s, 0, 5, 3)
            c.send(s)

            # 3
            s = c.stage(s)
            c.adde(s, 2, 1)
            c.adde(s, 2, 3)
            c.adde(s, 2, 4)
            c.addc(s, 2, 1, 4)
            c.addc(s, 2, 3, 5)
            c.addc(s, 2, 4, 3)
            c.send(s)

            # Unused stage since last corner and edge will already be solved
            s = c.stage(s)
            c.adde(s, 2, 5)
            c.addc(s, 2, 5, 1)

        mtb = (
            5, 6, 7, 9
            )

        MV_MENT = 17

        fname = fname_tab4

    cube_mtab = cube_mtab4

    print("Using large lookup tables\n")

else:
    # Mini tables

    trace("class cube_mtab1")
    class cube_mtab1:

        NSTAGE = 8    # Number of stages in solve
        NPIECE = 3    # Maximum number of corners/edges per stage

        def init(c):
            # 0
            s = c.stage(0)
            c.adde(s, 2, 1)
            c.adde(s, 2, 4)
            c.send(s)

            # 1
            s = c.stage(s)
            c.adde(s, 1, 4)
            c.addc(s, 2, 1, 4)
            c.send(s)

            # 2
            s = c.stage(s)
            c.adde(s, 2, 3)
            c.adde(s, 2, 5)
            c.send(s)

            # 3
            s = c.stage(s)
            c.adde(s, 4, 3)
            c.addc(s, 2, 4, 3)
            c.send(s)

            # 4
            s = c.stage(s)
            c.adde(s, 3, 5)
            c.addc(s, 2, 3, 5)
            c.send(s)

            # 5
            s = c.stage(s)
            c.adde(s, 0, 3)
            c.adde(s, 0, 4)
            c.addc(s, 0, 3, 4)
            c.send(s)

            # 6
            s = c.stage(s)
            c.addc(s, 0, 1, 5)
            c.addc(s, 0, 4, 1)
            c.addc(s, 2, 5, 1)
            c.send(s)

            # 7
            s = c.stage(s)
            c.adde(s, 0, 1)
            c.adde(s, 5, 1)
            c.send(s)

            # Unused stage since last corner and edge will already be solved
            s = c.stage(s)
            c.adde(s, 0, 5)
            c.addc(s, 0, 5, 3)

        mtd0 = b'\
\x0C\x33\xF5\
\x0E\xFF\xFF\
\x03\x53\xFF\
\x03\x55\xFF\
\x09\xF9\xFF\
\x03\x54\xFF\
\x11\x35\xF3\
\x06\x88\xFF\
\x0C\xFF\xFF\
\x0A\xF9\xFF\
\x06\x86\xFF\
\x00\xFA\xFF\
\x0B\xF9\xFF\
\x0D\xFF\xFF\
\x02\x98\xFF\
\x02\xFA\xFF\
\x03\x5B\xFF\
\x05\x33\xFF\
\x04\x4B\xFF\
\x01\xFA\xFF\
\x00\x98\xFF\
\x08\x6E\xF5\
\x06\x96\xF3\
\x08\xEE\xF5\
\x03\x6C\xFF\
\x08\x5E\xFF\
\x09\x96\xF3\
\x08\x8E\xF5\
\x08\x9E\x59\
\x0B\xE8\xF5\
\x06\x39\xFF\
\x08\x7E\xF5\
\x09\xE8\xF5\
\x0A\xE8\xF5\
\x0B\x96\xF3\
\x0C\x96\xF3\
\x0E\xC3\xF6\
\x03\x3C\xF3\
\x06\x39\xFB\
\x05\xB4\xF8\
\x04\xB2\xF3\
\x02\xC0\x33\
\x03\x5C\xF3\
\x08\x43\xF5\
\x05\xB5\xFF\
\x08\xFB\xFF\
\x07\x33\xFF\
\x08\xFF\xFF\
\x09\x98\xFF\
\x08\x53\xF5\
\x0F\x89\xFF\
\x0B\xF8\xFF\
\x08\xF9\xFF\
\x06\x7E\xFF\
\x09\xF8\xFF\
\x0A\xF8\xFF\
\x0B\x98\xFF\
\x08\xFA\xFF\
\x0C\xBB\xF8\
\x08\xA2\xFF\
\x03\xB5\xFF\
\x10\x89\xFF\
\x06\x7C\xFF\
\x00\x87\xFF\
\x11\x89\xFF\
\x0C\x36\xFF\
\x0C\xB5\xF4\
\x0C\xA3\xFF\
\x03\x69\xF3\
\x0C\x38\xFF\
\x09\x39\xFF\
\x07\x5E\xFF\
\x0F\x9C\x38\
\x0B\x89\xF3\
\x0C\xF3\xFF\
\x0A\x39\xFF\
\x0C\x89\xF3\
\x00\x39\xF9\
\x0B\x39\xFF\
\x0C\x93\xFF\
\x0C\x8B\xF3\
\x02\x39\xF9\
\x0C\xB3\xFF\
\x05\x69\xF3\
\x03\x39\xFB\
\x11\x9A\xF3\
\x0C\x02\xFB\
\x07\x8B\xFF\
\x05\xB2\xF3\
\x06\x8B\xFF\
\x0E\x8B\xFF\
\x0E\xF8\xFF\
\x08\xBB\xF8\
\x08\x8B\xFF\
\x0F\x9E\xF8\
\x0B\x8B\xFF\
\x0C\x10\xFF\
\x11\xB8\xF8\
\x0E\x89\xFF\
\x0E\x8A\xFF\
\x0E\x8B\xF9\
\x0E\xB8\xFF\
\x0C\xAB\xF8\
\x04\x6C\xFF\
\x0E\x53\xFB\
\x10\x9E\xF8\
\x0F\xB8\xF8\
\x0E\x70\xF8\
\x11\x9E\xF8\
\x06\xF3\xFF\
\x05\x4B\xFF\
\x03\xFF\xFF\
\x06\x36\xF9\
\x08\xF3\xFF\
\x09\x93\xFF\
\x07\xF3\xFF\
\x0F\x89\xF3\
\x0B\x38\xFF\
\x03\xF9\xFF\
\x11\x37\xFF\
\x09\x38\xFF\
\x0A\x38\xFF\
\x0B\x93\xFF\
\x03\xFA\xFF\
\x00\xB0\xFF\
\x04\x53\xFF\
\x03\xFB\xFF\
\x05\x43\xFF\
\x04\x5B\xFF\
\x10\x37\xFF\
\x02\xB0\xFF\
\x03\x53\xF3\
\x03\x7C\xFF\
\x0B\x5D\xFF\
\x0E\x88\xF8\
\x07\xFB\xFF\
\x06\x33\xFF\
\x07\xFF\xFF\
\x0F\x68\xF8\
\x08\x88\xFF\
\x07\xF9\xFF\
\x11\xF7\xFF\
\x08\x86\xFF\
\x08\x87\xFF\
\x07\x98\xFF\
\x07\xFA\xFF\
\x0C\x88\xF8\
\x06\x34\xFF\
\x05\x7C\xFF\
\x06\x35\xFF\
\x0F\xF7\xFF\
\x10\xF7\xFF\
\x11\x68\xF8\
\x06\x5E\xFF\
\x05\xE3\x5E\
\x06\x8E\xF5\
\x06\x9E\x59\
\x06\xEE\xF5\
\x03\xE3\xF5\
\x06\x6E\xF5\
\x08\x96\xF3\
\x09\xA9\xF8\
\x08\x39\xFF\
\x06\x7E\xF5\
\x09\x89\xFF\
\x09\x99\xF8\
\x08\x98\xF3\
\x0C\x98\xF3\
\x09\xB9\xF8\
\x04\xE3\xF5\
\x08\x39\xFB\
\x05\xE3\xF5\
\x06\x9C\xF7\
\x00\x96\x89\
\x11\x99\xF8\
\x06\xFF\xFF\
\x05\xB3\xFF\
\x0C\xB6\xFF\
\x0C\x33\xFF\
\x06\xFB\xFF\
\x03\xF3\xFF\
\x06\x43\xF5\
\x09\x96\xFF\
\x07\x88\xFF\
\x06\xF9\xFF\
\x08\x7E\xFF\
\x07\x86\xFF\
\x06\xA0\xFF\
\x0B\x96\xFF\
\x06\xFA\xFF\
\x0E\x33\xFF\
\x04\xF3\xFF\
\x03\xB3\xFF\
\x05\xF3\xFF\
\x08\x7C\xFF\
\x02\x31\xFF\
\x0F\xE5\xF6\
\x11\x56\xFF\
\x11\xB5\xFF\
\x11\xF5\xFF\
\x11\x58\xFB\
\x11\x5E\xFF\
\x03\x6E\xF5\
\x11\x58\xFF\
\x11\x99\xF5\
\x11\x8B\xF5\
\x11\x5C\xFF\
\x11\x57\xFF\
\x09\x8E\xF5\
\x11\x8A\xF5\
\x11\x9B\xF5\
\x11\x5D\xFF\
\x11\xBC\x58\
\x04\x6E\xF5\
\x03\xEE\xF5\
\x05\x6E\xF5\
\x0F\x79\xFF\
\x11\x9A\xF5\
\x11\x89\xF5\
\x0D\x36\xFF\
\x0E\xB5\xF3\
\x0A\x5D\xFF\
\x06\xE8\xF7\
\x0B\xB7\xFF\
\x0B\x36\xF3\
\x0D\x38\xFF\
\x0B\x7E\xFF\
\x0B\xF7\xFF\
\x08\xE8\xF7\
\x11\x7B\xFF\
\x0D\x89\xF3\
\x00\x3A\xFF\
\x0B\x97\xFF\
\x0D\xF3\xFF\
\x00\x3A\xFB\
\x02\x3A\xFF\
\x0D\xB3\xFF\
\x0B\x56\xF3\
\x0F\x7B\xFF\
\x10\x7B\xFF\
\x0D\x02\xFB\
\x07\x89\xFF\
\x0C\x55\xFB\
\x06\x89\xFF\
\x0E\xAB\xF8\
\x0E\x10\xFF\
\x0D\xBB\xF8\
\x0C\xF8\xFF\
\x0C\x89\xF9\
\x08\x89\xFF\
\x0F\x9C\xF8\
\x11\x98\xF8\
\x0C\x89\xFF\
\x0C\x8A\xFF\
\x0B\x98\xF3\
\x0C\x98\xFF\
\x0C\x8B\xFF\
\x02\x89\xF9\
\x0C\x53\xFB\
\x10\x9C\xF8\
\x0F\x98\xF8\
\x0C\x70\xF8\
\x11\x9C\xF8\
\x11\xF6\xFF\
\x08\x5E\xF3\
\x08\x6E\xFF\
\x11\x3C\xF3\
\x11\xB6\xFF\
\x11\x33\xFF\
\x07\x6E\xFF\
\x09\x98\xF3\
\x06\x6E\xFF\
\x11\x35\xFF\
\x11\x87\xF8\
\x11\x96\xFF\
\x0A\x89\xFF\
\x11\x6B\xF9\
\x11\xA6\xFF\
\x11\x3E\xF3\
\x11\x34\xFF\
\x11\x33\xFB\
\x05\x6E\xFF\
\x11\x12\xF3\
\x11\xE8\xF7\
\x11\x67\xF8\
\x10\x56\xFF\
\x10\xB5\xFF\
\x10\xF5\xFF\
\x10\x58\xFB\
\x10\x5E\xFF\
\x09\x36\xF3\
\x10\x58\xFF\
\x09\x97\xFF\
\x09\xF7\xFF\
\x06\x5D\xFB\
\x10\x8B\xF5\
\x10\x5C\xFF\
\x09\x68\xF8\
\x09\x7E\xFF\
\x10\x5D\xFF\
\x02\xE6\xF7\
\x09\x46\xF3\
\x03\xED\xF5\
\x09\x56\xF3\
\x09\x7C\xFF\
\x10\x57\xFF\
\x10\x56\xFB\
\x02\x6D\xFF\
\x09\x5D\xFB\
\x01\xF1\xFF\
\x00\xBB\x8B\
\x0E\x11\xFF\
\x0A\x36\xF3\
\x00\x8A\xFF\
\x09\xCD\xF5\
\x0A\xF7\xFF\
\x02\x5E\x6E\
\x0B\x8A\xF3\
\x0C\x11\xFF\
\x11\x7A\xFF\
\x09\x8D\xF5\
\x0B\x3A\xFF\
\x0C\xAB\x38\
\x0B\xA2\xF3\
\x0B\x3A\xFB\
\x0A\x56\xF3\
\x0F\x7A\xFF\
\x10\x7A\xFF\
\x11\xD9\x58\
\x09\x6E\xFF\
\x05\xB0\xF3\
\x02\x5C\xFF\
\x0E\x9B\xF8\
\x00\x3B\xFF\
\x09\x3E\xF3\
\x08\xC2\xF5\
\x09\x6E\xF9\
\x0B\x98\xF8\
\x09\x5E\xF3\
\x0B\x89\xFF\
\x0C\xC2\xF5\
\x0A\x98\xF3\
\x0B\xA9\xF8\
\x0E\xB0\xF3\
\x0B\xB9\xF8\
\x09\x4E\xF3\
\x03\xB0\xF3\
\x09\xE5\xF6\
\x04\xB0\xF3\
\x0F\xC2\x57\
\x0B\xCE\x89\
\x06\x10\xFF\
\x00\xB2\xF5\
\x00\xF1\xFF\
\x0E\xBB\xF8\
\x0D\x98\xFF\
\x0D\x8B\xFF\
\x0D\xF8\xFF\
\x09\x90\xF4\
\x08\x8A\xFF\
\x0F\x9D\xF8\
\x0B\x8A\xFF\
\x0D\xB8\xFF\
\x11\xA8\xF8\
\x0D\x89\xFF\
\x0D\x8A\xFF\
\x0B\x90\xF4\
\x03\xBA\xF8\
\x03\xB0\xF4\
\x00\x32\xF5\
\x00\xB1\xFF\
\x0F\x10\xFB\
\x11\x9D\xF8\
\x0E\x36\xFF\
\x05\x3B\xFF\
\x0E\x93\xFF\
\x0E\x8B\xF3\
\x0E\xF3\xFF\
\x03\x6B\xF3\
\x0E\x38\xFF\
\x0E\x39\xF9\
\x0E\x37\xFF\
\x06\xB5\xF3\
\x0B\x8B\xF3\
\x0E\xA3\xFF\
\x11\x7E\xF3\
\x0E\x89\xF3\
\x0E\x8A\xF3\
\x0E\x3B\xF9\
\x0E\x34\xF5\
\x03\x3B\xFF\
\x05\x6B\xF3\
\x04\x3B\xFF\
\x0F\xB4\xF3\
\x0E\x02\xFB\
\x06\xF4\xFF\
\x05\x5B\xFF\
\x04\xFF\xFF\
\x08\xB5\xF5\
\x0E\xF4\xFF\
\x03\x33\xFF\
\x08\xF4\xFF\
\x09\x49\xFF\
\x07\xF4\xFF\
\x11\x35\xF5\
\x0B\x48\xFF\
\x0C\xF4\xFF\
\x11\x47\xFF\
\x09\x48\xFF\
\x0A\x48\xFF\
\x0B\x49\xFF\
\x0D\xF4\xFF\
\x0E\x33\xF3\
\x05\x53\xFF\
\x04\xFB\xFF\
\x0F\xB4\xFF\
\x0F\x35\xF5\
\x06\xC0\xF5\
\x05\x6C\xFB\
\x00\x5C\xFF\
\x03\xBB\xF8\
\x02\x3B\xFF\
\x03\xB4\xF8\
\x03\x8B\xFF\
\x09\xC0\x5C\
\x08\xB3\xF8\
\x11\xC5\xF6\
\x0B\xB3\xF8\
\x0C\xC0\xF5\
\x00\x9E\xF7\
\x03\x9B\xF8\
\x03\xAB\xF8\
\x0B\xC0\x5C\
\x0E\xB2\xF3\
\x0C\x3B\x8B\
\x05\x6C\xFF\
\x00\x7C\xF5\
\x0F\xC0\x57\
\x05\x5C\xF3\
\x06\xF5\xFF\
\x05\xFB\xFF\
\x05\xFF\xFF\
\x08\xB5\xFF\
\x0E\xF5\xFF\
\x03\x43\xFF\
\x08\xF5\xFF\
\x09\x59\xFF\
\x07\xF5\xFF\
\x06\xB5\xFF\
\x0B\x58\xFF\
\x0C\xF5\xFF\
\x0A\x59\xFF\
\x09\x58\xFF\
\x0A\x58\xFF\
\x0B\x59\xFF\
\x0D\xF5\xFF\
\x0C\x8B\xF5\
\x04\x33\xFF\
\x03\x4B\xFF\
\x10\x79\xFF\
\x05\x80\xF9\
\x0F\xF6\xFF\
\x0F\x35\xFB\
\x08\x6C\xFF\
\x0F\x3C\xF3\
\x0F\xB6\xFF\
\x0F\x33\xFF\
\x04\x8B\xFF\
\x0F\x69\xF9\
\x06\x6C\xFF\
\x0F\x67\xF8\
\x0F\x87\xF8\
\x0F\x96\xFF\
\x0F\x12\xF3\
\x04\x9B\xF8\
\x0F\x06\xFA\
\x0F\x6B\xF9\
\x0F\xA6\xFF\
\x0F\x3E\xF3\
\x0F\x34\xFF\
\x03\xB2\xF3\
\x0F\xC8\xF7\
\x0F\x35\xFF\
\x10\xF6\xFF\
\x02\xB2\xF5\
\x02\xF1\xFF\
\x10\x3C\xF3\
\x0E\x12\xFF\
\x10\x33\xFF\
\x08\x12\xFF\
\x09\x29\xF1\
\x06\x6D\xFF\
\x11\xE5\xF6\
\x0B\x28\xF1\
\x0C\x12\xFF\
\x11\xE6\xF6\
\x10\x35\xFF\
\x11\x9A\xF8\
\x0B\x29\xF1\
\x0D\x12\xFF\
\x10\x3E\xF3\
\x10\x34\xFF\
\x03\x2B\xF1\
\x05\x6D\xFF\
\x02\xB1\xFF\
\x0F\x56\xFF\
\x0F\xB5\xFF\
\x0F\xF5\xFF\
\x0F\x58\xFB\
\x0F\x5E\xFF\
\x03\x6C\xF5\
\x0F\x58\xFF\
\x0F\x99\xF5\
\x07\x5C\xFF\
\x0F\x89\xF5\
\x0F\x8B\xF5\
\x0F\x5C\xFF\
\x11\x79\xFF\
\x09\x8C\xF5\
\x0F\x8A\xF5\
\x0F\x9B\xF5\
\x0F\x5D\xFF\
\x0F\xBC\x58\
\x04\x6C\xF5\
\x03\xEC\xF5\
\x05\x6C\xF5\
\x0F\x57\xFF\
'

        mtd1 = b'\
\x07\x8B\x55\xFF\
\x08\x69\xFF\xFF\
\x07\x45\xFF\xFF\
\x07\x79\xFF\xFF\
\x06\x55\xFF\xFF\
\x0B\x98\xF6\xFF\
\x08\x6A\xFF\xFF\
\x10\x46\xF5\xFF\
\x11\x56\xF5\xFF\
\x08\xB0\xF6\xFF\
\x06\x01\xF5\xFF\
\x08\x6B\xFF\xFF\
\x06\x00\xF5\xFF\
\x08\xB2\xF6\xFF\
\x06\x53\xFF\xFF\
\x0F\x56\xF5\xFF\
\x06\x54\xFF\xFF\
\x0F\x46\xF5\xFF\
\x06\x02\xF5\xFF\
\x03\x65\xAB\x56\
\x0E\x98\x36\x55\
\x0C\x1B\x08\xFB\
\x05\x70\x1E\xF0\
\x03\x7B\x95\xFF\
\x0F\x1C\x08\xFB\
\x0A\x19\x08\xFB\
\x05\x60\x1E\xF0\
\x05\x80\x1E\xF0\
\x0C\x81\xB0\xFF\
\x0C\xA3\x05\xFB\
\x0C\xB2\x25\xF0\
\x05\x21\x4C\xFF\
\x0C\x1A\x08\xFB\
\x05\x0E\x1E\xF0\
\x00\x02\x1E\xF0\
\x11\x05\x1E\xF0\
\x0C\xE0\xB1\xFF\
\x0D\xB9\xB1\xFF\
\x05\xE0\x01\xFF\
\x03\x6E\xC4\x58\
\x03\x53\xB5\x96\
\x0B\x15\x2C\xF0\
\x0E\x43\x59\xFF\
\x0C\xD0\x1B\xFB\
\x0F\x15\x2C\xF0\
\x09\x19\x2C\xFB\
\x05\x62\x01\xFF\
\x09\x3B\x94\xF5\
\x05\xC1\x02\xFF\
\x0C\xC1\xB2\xFF\
\x04\x3E\x01\xFF\
\x02\x19\x2C\xFB\
\x0C\x19\x2C\xFB\
\x05\x1D\x2C\xF0\
\x0C\x91\xAB\xFF\
\x10\x15\x2C\xF0\
\x0C\xE2\x19\xFB\
\x05\x00\x09\xFB\
\x05\x4B\x29\xF0\
\x03\xBC\x5E\xFF\
\x0E\x19\x50\x5B\
\x08\x09\x2E\x6C\
\x0D\xB3\xB7\xF5\
\x09\x10\x4E\xFF\
\x09\xD0\x25\xF0\
\x03\x89\x5B\xFF\
\x04\xD3\xA2\xF8\
\x0B\x5C\x01\xFF\
\x0B\xD1\x2C\xFB\
\x09\xC0\x25\xF0\
\x01\x06\x22\xF0\
\x0B\x9B\xBB\xF9\
\x00\x06\x22\xF0\
\x0B\xCD\xB2\xFF\
\x09\x20\x02\xFF\
\x09\xE0\x25\xF0\
\x03\xBC\xE4\xF5\
\x03\xBC\xE5\xF5\
\x08\x69\x25\xF0\
\x0A\xB6\x90\xF8\
\x0E\x00\x95\xF5\
\x08\x39\x1A\x32\
\x0A\x15\xF0\xFF\
\x0E\x10\xCE\xF4\
\x09\x93\x6B\x5B\
\x09\x29\x17\xFB\
\x08\xDE\xC1\xF6\
\x0F\x99\x1A\xFB\
\x0A\x61\x09\xFB\
\x0E\xA1\xB2\xFF\
\x0A\xA1\xA9\xFF\
\x00\xC7\x2C\xFB\
\x0B\xBC\x05\xF0\
\x0A\xCC\xB2\xFF\
\x0E\xE1\xBE\xFA\
\x0B\x36\x95\xB2\
\x05\xD3\x54\xF5\
\x09\xA9\xB1\xFF\
\x09\x20\x1E\xF0\
\x05\x62\x00\xFF\
\x05\x70\xC5\xF4\
\x08\xCE\xC0\xF6\
\x0E\x60\xB9\xF9\
\x10\x9A\xB1\xFF\
\x0B\xD5\x02\xFF\
\x0A\xC1\x25\xF0\
\x08\x3A\x21\xF3\
\x0F\x9A\xB1\xFF\
\x11\x5B\x2D\xF0\
\x02\x97\xB1\xFF\
\x05\x60\x00\xFF\
\x01\x97\xB1\xFF\
\x09\x05\xF0\xFF\
\x00\x97\xB1\xFF\
\x02\x56\x00\xFF\
\x0F\x5B\x2D\xF0\
\x11\x9A\xB1\xFF\
\x0A\x19\xFB\xFF\
\x05\x61\x00\xFF\
\x06\xD7\x8A\xFF\
\x04\x3E\x02\xFF\
\x0B\x81\x09\xFB\
\x0F\x0C\x99\xFA\
\x0B\x25\xE2\xF4\
\x0F\xC1\x25\xF0\
\x08\x6B\x05\xF0\
\x0B\xA1\xA9\xFF\
\x04\x4D\xFF\xFF\
\x08\x66\x10\x4E\
\x0C\x81\x2C\xFB\
\x10\xD5\x01\xFF\
\x00\xC8\x2C\xFB\
\x0F\x5B\x00\xFF\
\x0B\xCC\xB2\xFF\
\x02\xBC\x05\xF0\
\x06\x53\x29\xFB\
\x0F\x11\x4E\xFF\
\x0A\xA9\xB1\xFF\
\x0C\xBA\x25\xF0\
\x03\x9C\x5E\xFF\
\x05\x80\xC5\xF4\
\x0B\xC1\x25\xF0\
\x10\xA2\xA9\xFF\
\x0B\x11\x4E\xFF\
\x05\x2D\xF0\xFF\
\x0A\x80\x09\xFB\
\x09\x60\x05\xF0\
\x08\x6C\x2C\xF1\
\x0A\x60\x09\xFB\
\x0C\x82\xB1\xFF\
\x05\x70\x00\xFF\
\x10\x92\xB0\xFF\
\x0A\x05\xF0\xFF\
\x0C\x80\xB1\xFF\
\x03\x3E\x5C\xFF\
\x03\x80\xC3\xF4\
\x03\x9C\xE4\xF5\
\x0C\x1B\xFB\xFF\
\x05\x71\x00\xFF\
\x03\x85\x56\xFF\
\x0C\xC2\xBC\xFA\
\x0C\x0A\xFB\xFF\
\x0F\xA1\xA9\xFF\
\x0A\x10\x4E\xFF\
\x0F\x81\x09\xFB\
\x04\x93\x55\xF5\
\x10\x29\x22\xF0\
\x06\x88\x08\xFA\
\x10\xE2\x25\xF0\
\x0C\xD1\xB2\xFF\
\x0F\x15\xF0\xFF\
\x0E\xB9\x9B\xFF\
\x05\xC2\x01\xFF\
\x10\x2C\xFB\xFF\
\x04\x53\x55\xFF\
\x04\xB3\x55\xF5\
\x11\xE2\x2C\xFB\
\x0C\xD2\xB2\xFF\
\x05\xC0\x01\xFF\
\x0C\x71\xB1\xFF\
\x0E\x53\x59\xFF\
\x09\x61\x09\xFB\
\x00\xB0\x97\xF5\
\x0E\xE4\x4C\xFF\
\x03\xB9\xB6\xF5\
\x02\x2C\x96\xB0\
\x09\x15\xF0\xFF\
\x0F\xAC\xB1\xFF\
\x05\xC2\x02\xFF\
\x0C\x72\xB1\xFF\
\x0C\xC9\x19\xFB\
\x09\x0A\x2B\xFA\
\x0A\xBC\x05\xF0\
\x09\xCC\xB2\xFF\
\x0D\x67\x3A\xFF\
\x10\x25\x2C\xF0\
\x11\xAC\xB1\xFF\
\x0C\x1A\xFB\xFF\
\x00\xE2\x01\xFF\
\x05\x99\x3B\xFF\
\x0C\x00\x59\xFB\
\x00\x97\xB0\xFF\
\x00\x9A\xFA\xFF\
\x10\x90\xB0\xFF\
\x0A\xD5\x02\xFF\
\x00\x96\xB0\xFF\
\x00\xA8\xA9\xFF\
\x0F\x90\xB0\xFF\
\x00\x98\xB0\xFF\
\x0D\x90\xA2\xFF\
\x00\xE2\x0B\xF0\
\x0A\x2D\x09\xFB\
\x05\x00\xFF\xFF\
\x0C\xDB\xB2\xFF\
\x05\x3B\x39\xFF\
\x0C\x93\x22\xFB\
\x11\x90\xB0\xFF\
\x00\x09\xFB\xFF\
\x00\xA7\xA9\xFF\
\x05\x82\x00\xFF\
\x08\x6B\x9A\xFA\
\x00\xC8\x25\xF0\
\x03\x79\x5B\xFF\
\x00\xE1\xF4\xFF\
\x00\x5D\x02\xFF\
\x00\xC7\x25\xF0\
\x01\x26\x22\xF0\
\x11\x10\x4E\xFF\
\x00\x5C\x02\xFF\
\x01\x29\xFB\xFF\
\x00\x10\x21\xF0\
\x08\xEE\xC0\xF6\
\x09\xAE\x05\xF0\
\x0C\xCA\xB2\xFF\
\x00\x22\xF0\xFF\
\x00\x5E\x02\xFF\
\x0F\x10\x4E\xFF\
\x10\x10\x4E\xFF\
\x0C\xB9\x25\xF0\
\x03\xA4\x57\xFF\
\x03\x6B\x95\xFF\
\x0B\x20\x2C\xF0\
\x03\x9A\xA5\xFF\
\x02\x3B\x54\xF9\
\x11\xE1\x25\xF0\
\x04\x53\x89\xF5\
\x09\xD5\x01\xFF\
\x0B\xD5\x01\xFF\
\x0C\x80\xB0\xFF\
\x02\x99\xB1\xFF\
\x05\x1D\xF0\xFF\
\x04\xE4\xB4\xFF\
\x11\x5B\x00\xFF\
\x10\xCB\x2C\xFB\
\x11\x24\x00\xF1\
\x00\x08\x5E\x02\
\x11\x1C\xFB\xFF\
\x05\xBE\x1E\xF0\
\x05\xD0\x01\xFF\
\x08\x03\x32\xFF\
\x06\x53\xE4\xF4\
\x02\x97\xB0\xFF\
\x02\x9A\xFA\xFF\
\x05\xBC\x01\xFF\
\x02\xBC\x09\xFB\
\x02\x96\xB0\xFF\
\x0B\xA2\xA9\xFF\
\x09\xA2\xA9\xFF\
\x02\x98\xB0\xFF\
\x08\x03\xB2\xF6\
\x0A\xA2\xA9\xFF\
\x02\x09\xFB\xFF\
\x05\xBD\x00\xFF\
\x11\xD9\x2C\xFB\
\x11\x0B\x22\xF0\
\x02\xBD\x09\xFB\
\x01\x0E\x09\xFB\
\x02\xA9\x2D\xFB\
\x00\x12\xF0\xFF\
\x08\x2E\x6C\xFF\
\x0E\x02\x95\xF5\
\x10\xAC\xB0\xFF\
\x0A\x22\x02\xFF\
\x02\xE1\xF4\xFF\
\x02\x5D\x02\xFF\
\x05\x5B\x90\xF3\
\x09\x22\x02\xFF\
\x0B\x22\x02\xFF\
\x02\x5C\x02\xFF\
\x02\x4D\x4E\xFF\
\x02\x22\xF0\xFF\
\x05\x5B\x39\xFF\
\x05\xAC\x00\xFF\
\x0C\xB2\xFF\xFF\
\x10\x34\x55\xF5\
\x02\x5E\x02\xFF\
\x02\x4C\x4E\xFF\
\x02\x99\x2C\xFB\
\x04\x22\x10\xFF\
\x01\x92\xBB\xF3\
\x05\x20\x4C\xFF\
\x0B\x21\x2C\xF0\
\x03\x7B\x59\xFF\
\x0E\x43\x95\xFF\
\x05\x60\x2D\xF0\
\x05\x4B\x90\xF3\
\x09\xE5\x01\xFF\
\x0B\xE5\x01\xFF\
\x01\xC2\x02\xFF\
\x02\xA9\xB1\xFF\
\x05\x1E\xF0\xFF\
\x02\x29\x17\xFB\
\x03\xE0\xC4\xF5\
\x0E\x62\xBA\xF9\
\x00\x02\x1D\xF0\
\x0C\xA3\x22\xFB\
\x03\x4E\x5C\xFF\
\x0C\x19\xFB\xFF\
\x00\xD2\x01\xFF\
\x08\x0E\x6C\xFF\
\x0C\xB0\x36\xF5\
\x0A\x09\xFB\xFF\
\x0D\xA9\xFF\xFF\
\x0F\xA9\xA9\xFF\
\x0F\x9B\xB0\xFF\
\x09\x09\xFB\xFF\
\x0B\x9A\xFA\xFF\
\x09\x9A\xFA\xFF\
\x0B\x09\xFB\xFF\
\x0C\xB0\xFF\xFF\
\x0A\x9A\xFA\xFF\
\x0C\xB0\xB8\xF6\
\x05\xBE\x00\xFF\
\x0C\xDA\xB2\xFF\
\x03\x5B\xF9\xFF\
\x10\x9B\xB0\xFF\
\x10\xA9\xA9\xFF\
\x0E\xA0\xB0\xFF\
\x11\x9B\xB0\xFF\
\x06\x26\x88\xFF\
\x05\x02\xB5\xF6\
\x0B\x5C\x02\xFF\
\x0B\x4E\x4E\xFF\
\x04\x4E\xFF\xFF\
\x10\x25\xF0\xFF\
\x0A\x5C\x02\xFF\
\x0A\x4E\x4E\xFF\
\x11\xE4\xF4\xFF\
\x0F\x25\xF0\xFF\
\x09\x5C\x02\xFF\
\x03\x12\x02\xFF\
\x0E\x93\xF5\xFF\
\x03\x11\x02\xFF\
\x0C\xC9\xB2\xFF\
\x0E\x90\x25\xF0\
\x11\x25\xF0\xFF\
\x0F\xE4\xF4\xFF\
\x10\xE4\xF4\xFF\
\x05\x02\xFF\xFF\
\x0E\xCB\x99\xFF\
\x10\xB0\x53\x59\
\x11\x72\x09\xFB\
\x11\xA2\xA9\xFF\
\x04\x3B\x34\xF9\
\x03\x09\x66\x5B\
\x11\x62\x09\xFB\
\x0E\xCB\x9D\xF9\
\x0F\xBC\xB1\xFF\
\x0F\x71\x05\xF0\
\x06\x55\x09\xFB\
\x0E\xCB\x9C\xF9\
\x11\x92\xB0\xFF\
\x0F\x5A\x00\xFF\
\x02\x2E\x09\xFB\
\x0F\xE3\xC3\xF5\
\x0E\x35\x93\xFF\
\x0F\x1B\xE1\xF4\
\x01\x2E\x09\xFB\
\x11\x82\x09\xFB\
\x0C\xE0\xB2\xFF\
\x0C\xD2\xBC\xFA\
\x0F\xAC\xB0\xFF\
\x0A\x5D\x01\xFF\
\x03\xE2\xC5\xF5\
\x11\xE2\x25\xF0\
\x05\x43\x89\xF5\
\x09\x5D\x01\xFF\
\x11\x12\x4E\xFF\
\x11\xD2\x25\xF0\
\x0C\xE1\xB2\xFF\
\x10\x15\xF0\xFF\
\x00\xCE\xB2\xFF\
\x02\x5D\x01\xFF\
\x11\x2C\xFB\xFF\
\x01\x5D\x01\xFF\
\x11\x24\x02\xF1\
\x06\xB4\x91\xF8\
\x0C\xE2\xB2\xFF\
\x00\x5D\x01\xFF\
\x10\x53\x66\xF5\
\x03\xB2\x56\xF9\
\x11\x0B\xC2\x02\
\x03\xA2\x59\xFA\
\x10\x1C\xFB\xFF\
\x03\x19\x67\x5B\
\x0F\xB8\x56\x00\
\x11\x61\x15\xF0\
\x0B\x5E\x1D\xF0\
\x10\xE1\x25\xF0\
\x11\x92\x19\xFB\
\x11\xD5\x01\xFF\
\x03\x61\xC3\xF4\
\x10\x5B\x00\xFF\
\x0F\xCB\x2C\xFB\
\x02\xBD\x05\xF0\
\x10\xC1\x25\xF0\
\x06\x46\x81\xF8\
\x10\x11\x4E\xFF\
\x03\x10\x01\xFF\
\x05\xB9\x3B\xFF\
\x00\x3B\x95\xF5\
\x0B\xC0\x25\xF0\
\x0F\xA2\xA9\xFF\
\x0B\x10\x4E\xFF\
\x0F\x82\x09\xFB\
\x0F\x62\x09\xFB\
\x09\x5C\x01\xFF\
\x01\x58\x1E\xF0\
\x05\x2C\xF0\xFF\
\x11\x2C\x18\xFB\
\x11\x70\x05\xF0\
\x0F\x92\xB0\xFF\
\x11\x5A\x00\xFF\
\x09\xCD\xB2\xFF\
\x0B\x20\x02\xFF\
\x0B\xE0\x25\xF0\
\x11\xBC\xB1\xFF\
\x09\xD2\x2C\xFB\
\x09\xC0\x15\xF0\
\x06\x0B\x89\xFF\
\x0B\x3B\x95\xF5\
\x11\xAC\xB0\xFF\
\x01\x9A\xFA\xFF\
\x05\x22\x4E\xFF\
\x0F\xC2\x25\xF0\
\x01\x96\xB0\xFF\
\x01\xA8\xA9\xFF\
\x01\xA6\xA9\xFF\
\x01\x98\xB0\xFF\
\x07\x0C\xEE\xF7\
\x05\x01\xFF\xFF\
\x0D\xB0\xA2\xFF\
\x09\xBC\x05\xF0\
\x0F\x2C\xFB\xFF\
\x07\x3D\x7D\xFF\
\x03\x60\xC3\xF4\
\x0F\x12\x4E\xFF\
\x0B\xA9\xB1\xFF\
\x0C\xBB\x25\xF0\
\x03\x65\x56\xFF\
\x0F\xB3\x56\xF9\
\x08\x39\x22\xF3\
\x0C\x90\xA9\xFF\
\x01\xE1\xF4\xFF\
\x09\xD5\x02\xFF\
\x09\x29\x18\xFB\
\x0B\xA0\xA9\xFF\
\x01\x4E\x4E\xFF\
\x01\x5C\x02\xFF\
\x05\x3C\x09\xFB\
\x0F\xD5\x01\xFF\
\x07\xB7\x7A\xFF\
\x0B\x05\xF0\xFF\
\x11\xCB\x2C\xFB\
\x04\x02\x10\xFF\
\x01\x5E\x02\xFF\
\x01\x4C\x4E\xFF\
\x0C\xB1\xFF\xFF\
\x09\x71\x05\xF0\
'

        mtd2 = b'\
\x0F\x68\xF6\xFF\
\x08\x68\xFF\xFF\
\x0A\xAE\xFF\xFF\
\x11\xFF\xFF\xFF\
\x08\x66\xFF\xFF\
\x02\xFD\xFF\xFF\
\x09\xBE\xFF\xFF\
\x01\xFD\xFF\xFF\
\x0B\x62\xFE\xFF\
\x00\xFD\xFF\xFF\
\x05\x3C\xFF\xFF\
\x10\x68\xF6\xFF\
\x0F\xFF\xFF\xFF\
\x10\xFF\xFF\xFF\
\x11\x68\xF6\xFF\
\x0B\xE6\xF8\xFF\
\x11\x95\xB8\x3B\
\x0B\xE6\xC8\xFF\
\x0A\xE2\xF9\xFF\
\x11\x6B\x8E\xFF\
\x09\x95\xB6\xF3\
\x0B\x8E\x68\xF6\
\x06\x8C\xE6\xFF\
\x0C\xBA\xE2\xF9\
\x0A\x62\x9E\xFF\
\x0B\x0C\xAD\xFF\
\x08\x89\xB3\xF7\
\x05\x89\xBB\xF3\
\x0B\x0C\xF7\xFF\
\x0B\xE6\xE8\xFF\
\x0B\x8E\x66\xF8\
\x0B\x68\x86\xFF\
\x0B\x6E\x8C\xFF\
\x08\x68\xF6\xFF\
\x10\x70\xFE\xFF\
\x11\xC6\xF8\xFF\
\x08\x66\xF8\xFF\
\x08\x67\xF7\xFF\
\x09\x6E\x8C\xFF\
\x01\x0D\xF7\xFF\
\x08\x62\xE6\xFB\
\x00\x0D\xF7\xFF\
\x05\x6C\x8E\xF3\
\x05\x89\x3B\xFF\
\x0F\xE6\xF8\xFF\
\x10\x70\xFF\xFF\
\x08\x9E\x6C\xF8\
\x0F\x89\x68\xFF\
\x0F\xEB\xFA\xFF\
\x0F\x29\xFD\xFF\
\x09\x9C\xFE\xFF\
\x0F\xD9\xFF\xFF\
\x0F\x60\xFE\xFF\
\x02\x9C\xFC\xFF\
\x0F\xE9\xFF\xFF\
\x01\x9C\xFC\xFF\
\x0F\x62\xFE\xFF\
\x00\x9C\xFC\xFF\
\x05\x9C\xF3\xFF\
\x11\xD0\xE9\xFF\
\x0F\xF9\xFF\xFF\
\x0F\xC9\xFF\xFF\
\x00\x9C\xFE\xFF\
\x0B\x68\xF6\xFF\
\x0B\xFE\xFF\xFF\
\x0B\xFF\xFF\xFF\
\x0F\x2B\xFD\xFF\
\x11\xFB\xFF\xFF\
\x0B\xD2\xFF\xFF\
\x02\xBD\xFF\xFF\
\x09\xAE\xFF\xFF\
\x0B\xD1\xFF\xFF\
\x0A\x62\xFE\xFF\
\x0B\xD0\xFF\xFF\
\x05\xBC\xF3\xFF\
\x10\x2B\xFD\xFF\
\x0F\xFB\xFF\xFF\
\x10\xFB\xFF\xFF\
\x0A\x60\xFE\xFF\
\x05\x69\x3B\xFF\
\x09\x72\x9E\xFF\
\x0A\xE6\xF8\xFF\
\x0C\x35\xC3\xFE\
\x09\x82\x9E\xFF\
\x08\x93\x59\xF3\
\x0A\xE6\xC8\xFF\
\x09\xE2\xF9\xFF\
\x09\xE1\xE0\xF9\
\x09\x62\x9E\xFF\
\x0E\x92\xEA\xFF\
\x01\x26\x9E\xFF\
\x11\x60\xE2\xF9\
\x0A\x0C\xF7\xFF\
\x09\x2E\x9E\xFF\
\x00\x26\x9E\xFF\
\x06\x8E\xFC\xFF\
\x0B\xE2\xF9\xFF\
\x06\x8E\xFF\xFF\
\x11\x95\xB8\xF3\
\x11\x88\x66\xFF\
\x0F\x70\xFE\xFF\
\x06\xE2\xE8\xFF\
\x0F\x09\xAE\xFF\
\x06\xE1\xE8\xFF\
\x0B\x62\x9E\xFF\
\x0F\xD0\xFA\xFF\
\x05\x3C\x70\xFF\
\x05\xCE\xB8\xF3\
\x0F\x70\xFF\xFF\
\x06\x8E\xFE\xFF\
\x11\x68\x86\xFF\
\x09\x88\xF6\xFF\
\x0B\xAE\xFF\xFF\
\x09\xFF\xFF\xFF\
\x09\x8C\x66\xFF\
\x09\xD2\xFF\xFF\
\x0A\xBE\xFF\xFF\
\x02\xD6\xFF\xFF\
\x09\xFE\xFF\xFF\
\x09\xD1\xFF\xFF\
\x02\xE6\xFF\xFF\
\x09\xD0\xFF\xFF\
\x01\xE6\xFF\xFF\
\x11\xC0\xE9\xFF\
\x09\xFC\xFF\xFF\
\x09\xFD\xFF\xFF\
\x00\xE6\xFF\xFF\
\x0A\xD2\xFF\xFF\
\x0B\xBE\xFF\xFF\
\x0A\xFF\xFF\xFF\
\x08\x68\xBE\xFF\
\x08\x68\xF8\xFF\
\x0A\xFE\xFF\xFF\
\x11\xFA\xFF\xFF\
\x08\x66\xF6\xFF\
\x0A\xD1\xFF\xFF\
\x09\x62\xFE\xFF\
\x0A\xD0\xFF\xFF\
\x05\xAC\xF3\xFF\
\x11\x09\xE6\xFF\
\x0F\xFA\xFF\xFF\
\x10\xFA\xFF\xFF\
\x09\x60\xFE\xFF\
\x09\x8E\x68\xF6\
\x02\xE8\xF9\xFF\
\x09\xE6\xF8\xFF\
\x08\x82\xE6\xF9\
\x02\x9E\xD2\xFF\
\x02\xE7\xF9\xFF\
\x02\x9E\xFF\xFF\
\x09\xE6\xC8\xFF\
\x01\x0E\x9E\xFF\
\x02\xE6\xF9\xFF\
\x0E\xD0\xBC\xFF\
\x02\x2E\xE6\xFF\
\x02\x0E\xE6\xFF\
\x09\x0C\xF7\xFF\
\x11\xE2\xF9\xFF\
\x00\x16\x9E\xFF\
\x02\x27\xFD\xFF\
\x02\xE8\xFB\xFF\
\x02\xF7\xFF\xFF\
\x0F\x2B\xAD\xFF\
\x09\xD2\xFA\xFF\
\x02\xE7\xFF\xFF\
\x11\x72\xFF\xFF\
\x0B\xD2\xFA\xFF\
\x02\xAD\xFF\xFF\
\x09\x2E\xF7\xFF\
\x00\x1D\xF7\xFF\
\x02\x26\xE6\xFF\
\x03\x20\x9D\xFF\
\x0F\x72\xFF\xFF\
\x10\x72\xFF\xFF\
\x03\x22\xAC\xFF\
\x0C\xBB\x68\xF6\
\x0C\xEB\xFE\xFF\
\x0C\xBB\xFF\xFF\
\x06\x35\x3B\xF4\
\x01\x9E\xD2\xFF\
\x0A\xE1\xF9\xFF\
\x01\x9E\xFF\xFF\
\x0C\xBB\xD2\xFF\
\x02\x2E\x9E\xFF\
\x09\xE1\xF9\xFF\
\x00\x0E\x9E\xFF\
\x01\xE6\xF9\xFF\
\x01\x0E\xE6\xFF\
\x0F\xBC\xFB\xFF\
\x11\xE1\xF9\xFF\
\x00\x06\x9E\xFF\
\x01\x27\xFD\xFF\
\x01\xE8\xFB\xFF\
\x01\xF7\xFF\xFF\
\x08\x81\xE6\xFB\
\x08\x81\x86\xFF\
\x01\xE7\xFF\xFF\
\x11\x71\xFF\xFF\
\x08\x61\x66\xFF\
\x02\x2D\xF7\xFF\
\x09\x1E\xF7\xFF\
\x01\xAD\xFF\xFF\
\x02\xE6\x72\xFF\
\x11\x60\xE0\xFA\
\x0F\x71\xFF\xFF\
\x10\x71\xFF\xFF\
\x00\x06\xAE\xFF\
\x05\xC3\xE8\xF3\
\x0B\xE0\xF9\xFF\
\x0E\x92\xFB\xFF\
\x10\x60\x9E\xFF\
\x00\x9E\xD2\xFF\
\x0A\xE0\xF9\xFF\
\x00\x9E\xFF\xFF\
\x0F\x60\x9E\xFF\
\x0E\xD2\xBC\xFF\
\x09\xE0\xF9\xFF\
\x01\x2E\x9E\xFF\
\x02\x16\x9E\xFF\
\x11\x60\x9E\xFF\
\x10\xE0\xF9\xFF\
\x11\xE0\xF9\xFF\
\x00\xE6\xF9\xFF\
\x0A\xD2\xF9\xFF\
\x11\xEB\xF9\xFF\
\x10\xD9\xFF\xFF\
\x10\x60\xFE\xFF\
\x09\xD2\xF9\xFF\
\x11\xEA\xF9\xFF\
\x10\xC9\xFF\xFF\
\x0B\xD2\xF9\xFF\
\x02\x9D\xFF\xFF\
\x10\xE9\xFF\xFF\
\x01\x9D\xFF\xFF\
\x10\x62\xFE\xFF\
\x00\x9D\xFF\xFF\
\x10\x61\xFE\xFF\
\x10\xF9\xFF\xFF\
\x00\x9D\xFE\xFF\
\x06\x8C\xFE\xFF\
\x0B\x0E\xF7\xFF\
\x06\x8C\xFF\xFF\
\x0F\x68\x86\xFF\
\x0F\x88\x66\xFF\
\x11\x70\xFE\xFF\
\x11\x70\xFF\xFF\
\x09\xC6\xE8\xFF\
\x06\xC2\xC8\xFF\
\x09\x0E\xF7\xFF\
\x06\xC1\xC8\xFF\
\x02\xE6\x70\xFF\
\x11\xD0\xFA\xFF\
\x01\xE6\x70\xFF\
\x06\x8C\xFC\xFF\
\x00\xE6\x70\xFF\
\x06\x8D\xFD\xFF\
\x00\xE8\xFB\xFF\
\x00\xF7\xFF\xFF\
\x08\x80\xE6\xFB\
\x08\x80\x86\xFF\
\x00\xE7\xFF\xFF\
\x00\xAE\xFF\xFF\
\x08\x60\x66\xFF\
\x02\x1D\xF7\xFF\
\x09\xE0\xFA\xFF\
\x00\x07\xFD\xFF\
\x03\x20\xAC\xFF\
\x00\xAD\xFF\xFF\
\x00\x06\xE6\xFF\
\x10\x68\x86\xFF\
\x00\xAC\xFF\xFF\
\x11\x89\x68\xFF\
\x0B\x9E\xFF\xFF\
\x11\xC9\xFF\xFF\
\x08\x68\x9E\xFF\
\x11\x29\xFD\xFF\
\x0A\x9E\xFF\xFF\
\x11\xF9\xFF\xFF\
\x0B\x2C\x9D\xFF\
\x0F\xD2\xF9\xFF\
\x09\x9E\xFF\xFF\
\x0F\xD1\xF9\xFF\
\x11\x62\xFE\xFF\
\x0F\xD0\xF9\xFF\
\x11\x61\xFE\xFF\
\x11\x60\xFE\xFF\
\x11\xD9\xFF\xFF\
'

        mtd3 = b'\
\x04\x84\xB8\x48\xFF\
\x0E\x0B\x96\xFF\xFF\
\x0B\xAE\x9C\xFF\xFF\
\x0B\xBE\x9C\xFF\xFF\
\x08\x0B\x69\xFF\xFF\
\x08\x26\x68\xFF\xFF\
\x04\x93\x48\xFF\xFF\
\x08\x16\x68\xFF\xFF\
\x08\x2B\x69\xFF\xFF\
\x05\x64\x37\xFF\xFF\
\x11\x08\x68\xFC\xFF\
\x08\x06\x68\xFF\xFF\
\x0B\x9E\x9C\xFF\xFF\
\x0A\xE0\x2A\xAC\xFF\
\x11\x0E\x99\x1C\xF8\
\x0B\x91\xA9\x92\xFF\
\x0E\xC0\xE0\x90\xFF\
\x09\x72\x99\xFB\xFF\
\x02\x26\xB8\x92\xFF\
\x00\x36\x20\x81\xFF\
\x0E\x92\xB0\x92\xFF\
\x09\x03\x12\xF8\xFF\
\x0B\x99\x2A\xF9\xFF\
\x0E\xB0\x48\xA3\xFF\
\x09\xE1\xC0\xFB\xFF\
\x09\xA9\x0B\xF8\xFF\
\x09\x82\x2B\xF9\xFF\
\x0A\x0E\xC7\x72\xFF\
\x0A\x0C\x2E\x08\xF8\
\x0E\xA0\x66\xB8\xFF\
\x09\x92\xBA\xFB\xFF\
\x09\x80\x62\x80\xFF\
\x00\x0B\xBA\x9B\xFF\
\x00\x0B\x99\x80\xFF\
\x0E\xA0\xBB\xF9\xFF\
\x0E\x90\x09\xF8\xFF\
\x0E\x15\x20\xF9\xFF\
\x09\x62\xD6\x78\xFF\
\x11\x29\x1C\xF8\xFF\
\x09\x01\x82\xF5\xFF\
\x11\x2E\x1C\xF9\xFF\
\x0F\x2E\x0E\xF9\xFF\
\x11\xC9\x90\xB9\xFB\
\x0C\xBA\x2B\xF8\xFF\
\x0F\xD2\xC1\x0E\xF9\
\x11\xCB\xEB\xC9\xFF\
\x0E\xC0\xE2\x90\xFF\
\x0E\x57\x02\x94\xFF\
\x0F\xE0\x2E\xF9\xFF\
\x0B\x72\x23\x58\xFF\
\x0E\xC2\xE2\x90\xFF\
\x0E\xE6\xC1\x98\xFF\
\x0F\xE0\xB3\x92\xF5\
\x09\xC6\xE2\x08\xF8\
\x0F\xE1\xB2\x92\xFF\
\x06\x1E\x2D\x8E\xFF\
\x11\xCA\x0B\xF8\xFF\
\x0F\x29\x1D\xE8\xFF\
\x0F\xD9\x60\xAC\xFE\
\x02\x18\x27\xF8\xFF\
\x11\xD9\xE2\x80\xFF\
\x01\x18\x27\xF8\xFF\
\x0B\xB0\xA2\xB9\xFF\
\x09\xD6\x18\xF8\xFF\
\x0F\xE2\xB0\x92\xFF\
\x0A\x79\x7C\xB7\xFF\
\x09\xE6\xE2\x18\xF8\
\x0B\x71\x82\xFF\xFF\
\x09\xBD\xED\x91\xFF\
\x0E\xC2\xE0\xFC\xFF\
\x0F\x6B\x8C\xE6\xF9\
\x0B\x9E\xAC\x80\xFF\
\x0F\xB0\xE5\x03\xF9\
\x02\x0C\x9E\x80\xFF\
\x0F\x0E\xCE\xFF\xFF\
\x0B\x60\x60\x80\xFF\
\x02\xEC\xE0\xFC\xFF\
\x0F\x60\x80\xFE\xFF\
\x0E\xC1\xE0\xFC\xFF\
\x0F\xCB\xE9\xF9\xFF\
\x0F\xD0\x09\xBC\xFF\
\x0F\xE0\x09\xF8\xFF\
\x0E\xC0\xE0\xFC\xFF\
\x01\x9B\xBE\xCC\xFF\
\x09\xB9\x2B\xF8\xFF\
\x11\xD9\xE2\x81\xFF\
\x09\xA9\xBB\xFF\xFF\
\x09\x81\x62\x80\xFF\
\x0E\xC5\xE3\x90\xFF\
\x09\x5C\x3E\x82\xFF\
\x0E\x91\xB0\x92\xFF\
\x11\xC9\x81\xFF\xFF\
\x02\x2B\xB0\xA5\xFF\
\x0A\xD6\x78\xFF\xFF\
\x01\xE6\xC0\xFB\xFF\
\x0F\x61\x0E\xE8\xFF\
\x0E\x15\x90\xFF\xFF\
\x07\x1E\x7C\xFF\xFF\
\x02\x06\x99\xBB\xFF\
\x0C\x66\xB8\xFF\xFF\
\x11\xCA\xFA\xFF\xFF\
\x09\x91\xBB\xFB\xFF\
\x0E\x2B\x06\xF9\xFF\
\x0B\x71\x80\xFF\xFF\
\x0C\xBB\xF9\xFF\xFF\
\x0B\x70\x80\xFF\xFF\
\x02\x96\xB9\xFB\xFF\
\x0C\xC7\xB7\xFF\xFF\
\x11\x09\xBC\xFF\xFF\
\x09\x80\xFF\xFF\xFF\
\x10\xCA\xCA\xFF\xFF\
\x06\x2C\x8E\xFF\xFF\
\x0E\x92\xEB\xCB\xF9\
\x0E\x82\x60\xF9\xFF\
\x01\x0E\xC7\xFA\xFF\
\x0B\x99\xFB\xFF\xFF\
\x0E\x82\x61\xF9\xFF\
\x11\xC9\x23\x58\xFF\
\x0B\x60\x2B\xF9\xFF\
\x04\x5A\x5A\xFF\xFF\
\x0E\x92\xFF\xFF\xFF\
\x00\x36\x22\x82\xFF\
\x03\x2B\x59\xFF\xFF\
\x00\x96\xBB\xFB\xFF\
\x0B\x62\x2B\xF9\xFF\
\x0E\xE9\xCB\xFC\xFF\
\x01\x96\xBB\x82\xFF\
\x09\xBE\x9C\x80\xFF\
\x00\x97\xBA\xFF\xFF\
\x09\x9E\xAC\xFF\xFF\
\x0E\x1B\x06\xF9\xFF\
\x02\x06\x9E\xAC\xFF\
\x0E\xB3\xA5\xFF\xFF\
\x03\x21\x60\x80\xFF\
\x11\xC9\xBB\x92\xFF\
\x01\x67\x8D\xF7\xFF\
\x09\x0E\xBC\xFF\xFF\
\x0E\x25\xB1\xA5\xFF\
\x11\xC1\xB2\x92\xFF\
\x06\x08\x86\xFF\xFF\
\x0E\x92\x60\x82\xFF\
\x0E\x81\x60\xF9\xFF\
\x01\xAE\xAC\xFF\xFF\
\x0A\x80\x72\xFF\xFF\
\x00\x96\xB9\xFB\xFF\
\x01\x06\xF8\xFF\xFF\
\x07\x94\x44\xFC\xFF\
\x11\xD9\xE1\xFB\xFF\
\x03\x22\x2B\xF9\xFF\
\x01\x79\x7C\xFB\xFF\
\x01\x9E\xC0\xFB\xFF\
\x01\x18\x07\xF8\xFF\
\x0E\x91\xFF\xFF\xFF\
\x07\x2E\x7C\xFF\xFF\
\x09\x80\xB9\x9B\xFF\
\x0F\xE2\x19\xF8\xFF\
\x11\x70\xAC\xFF\xFF\
\x09\x92\xBB\xFB\xFF\
\x01\x2B\xF9\xFF\xFF\
\x02\x96\xBB\xFB\xFF\
\x11\x99\xC9\xBE\xFF\
\x09\x81\xFF\xFF\xFF\
\x07\xEE\xC2\x7C\xFF\
\x09\x02\x22\x82\xFF\
\x01\xB0\x92\xF5\xFF\
\x11\xC0\x09\xF8\xFF\
\x01\x08\xB6\x92\xFF\
\x0A\x1B\x19\xF7\xFF\
\x09\x81\x2B\xF9\xFF\
\x0F\x62\x1C\xE8\xFF\
\x01\x97\xBA\xFF\xFF\
\x09\xE0\xC9\xFA\xFF\
\x0B\x62\x0B\xF9\xFF\
\x01\x1C\x9E\x80\xFF\
\x0E\x05\x90\x09\xF8\
\x0A\x1B\x99\x71\xFF\
\x0B\x72\x99\xBB\xFF\
\x02\x67\x8D\xF7\xFF\
\x09\xE0\xC0\xFB\xFF\
\x09\x99\x0B\xF8\xFF\
\x11\xC1\x1E\xF9\xFF\
\x06\x18\x86\xFF\xFF\
\x0E\x92\x62\x80\xFF\
\x02\x69\x86\xFB\xFF\
\x11\x72\xAC\xFF\xFF\
\x02\x06\xF8\xFF\xFF\
\x0F\xD2\xCA\xFA\xFF\
\x01\x07\x26\xF7\xFF\
\x00\x20\xB2\x92\xFF\
\x02\x18\x07\xF8\xFF\
\x00\x1B\xF9\xFF\xFF\
\x0F\x72\xAC\xFE\xFF\
\x02\x9E\xC0\xFB\xFF\
\x0F\xE2\x09\xF8\xFF\
\x01\x96\xB9\xFB\xFF\
\x06\x1C\x8E\xFF\xFF\
\x09\x72\x9E\x9C\xFF\
\x09\x92\xB9\x82\xFF\
\x0F\xE2\x2E\xF9\xFF\
\x09\xB9\xBB\xFF\xFF\
\x03\x22\xB2\x92\xFF\
\x09\x82\xFF\xFF\xFF\
\x03\x21\xB2\x92\xFF\
\x00\x0E\x9C\x80\xFF\
\x0E\x90\xB2\x92\xFF\
\x09\x23\x22\xF8\xFF\
\x02\xB0\x92\xF5\xFF\
\x09\x13\x22\xF8\xFF\
\x02\x2B\xF9\xFF\xFF\
\x03\x95\xB2\x56\xFF\
\x11\x0E\xCC\x19\xF8\
\x10\xE9\xE2\x81\xFF\
\x11\x71\xAC\xFF\xFF\
\x01\x9D\x1D\xF8\xFF\
\x03\xB1\x92\xF5\xFF\
\x11\xC0\x19\xF8\xFF\
\x02\x10\x2B\x59\xFF\
\x10\xD9\x81\xFF\xFF\
\x03\x21\x2B\xF9\xFF\
\x0A\xAD\xFD\xFF\xFF\
\x03\x91\xA1\x92\xF5\
\x11\xC1\x09\xF8\xFF\
\x0E\x00\x22\x91\xFF\
\x0A\x02\x70\xF5\xFF\
\x09\x22\x3C\x1E\xF8\
\x0F\xD2\x19\xBC\xFF\
\x11\x09\xC6\xFA\xFF\
\x09\x0E\xC6\xFA\xFF\
\x10\xC9\xC0\xFB\xFF\
\x09\xE0\xC1\xFB\xFF\
\x03\x3B\x5B\x5A\xFF\
\x11\x19\xBC\xFF\xFF\
\x0F\x4E\x4E\x92\xFF\
\x06\x8D\x03\x57\xFF\
\x11\x61\x3C\x82\xF5\
\x09\xE2\xC1\xFB\xFF\
\x11\xC2\xB2\x92\xFF\
\x0A\x23\x02\xF7\xFF\
\x09\xD2\xC9\xCA\xFF\
\x03\x91\x66\xB8\xF5\
\x0A\x23\x32\x8D\xFF\
\x0B\xBC\x9E\xFE\xFF\
\x0E\x02\x21\xF9\xFF\
\x03\x61\x80\xF5\xFF\
\x0E\x23\x5B\xFA\xFF\
\x03\x20\x60\x80\xFF\
\x0E\x00\x21\xF9\xFF\
\x09\x0D\x88\x68\xFF\
\x03\x22\x3B\x5B\xFA\
\x00\xC8\xEB\xE9\xFF\
\x03\x1B\x59\xFF\xFF\
\x02\x9B\xBE\xCC\xFF\
\x0E\x91\x09\xF8\xFF\
\x0E\xA1\x66\xB8\xFF\
\x0A\xA9\xFB\xFF\xFF\
\x0B\x70\xB9\xBB\xFF\
\x0B\x61\xB1\x92\xFF\
\x0F\x61\x80\xFE\xFF\
\x0E\x02\x5B\xFA\xFF\
\x03\x61\x15\xF8\xFF\
\x0E\x25\x20\xF9\xFF\
\x0F\x71\xAC\xFE\xFF\
\x0E\x02\x22\xF9\xFF\
\x0F\xE1\x09\xF8\xFF\
\x0F\xC1\xCA\xCA\xFF\
\x06\x0C\x8E\xFF\xFF\
\x09\x90\xB9\xFB\xFF\
\x0E\x80\x60\xF9\xFF\
\x00\xAE\xAC\xFF\xFF\
\x00\x18\x07\xF8\xFF\
\x0E\x90\xFF\xFF\xFF\
\x00\x08\x07\xF8\xFF\
\x09\x99\xBB\xFF\xFF\
\x00\x06\xF8\xFF\xFF\
\x09\x92\xB9\xFB\xFF\
\x03\x60\x80\xF5\xFF\
\x00\x9E\xC0\xFB\xFF\
\x0A\x60\x72\xFF\xFF\
\x09\x91\xB9\xFB\xFF\
\x06\x28\x86\xFF\xFF\
\x09\x9E\xBC\x80\xFF\
\x00\x2B\x08\x96\xFF\
\x02\x0E\xC7\xFA\xFF\
\x06\x8E\x68\x8C\xFF\
\x11\xC0\xB0\x92\xFF\
\x00\xA1\xA5\xF5\xFF\
\x00\x2B\xF9\xFF\xFF\
\x09\xE6\x18\xF8\xFF\
\x03\x20\x2B\xF9\xFF\
\x11\xC1\xB0\x92\xFF\
\x00\xB0\x92\xF5\xFF\
\x01\x26\xF8\xFF\xFF\
\x09\x81\xB0\x92\xFF\
'

        mtd4 = b'\
\x08\x9C\xBE\xE2\xF6\
\x08\x2C\x6E\xFF\xFF\
\x08\x80\x62\xF6\xFF\
\x08\x1C\x6E\xFF\xFF\
\x08\x28\x66\xFF\xFF\
\x08\x0C\x6E\xFF\xFF\
\x11\xC5\xC3\xFF\xFF\
\x05\xC5\x36\xFF\xFF\
\x11\xD5\xC3\xFF\xFF\
\x05\xE5\x36\xFF\xFF\
\x08\x08\x66\xFF\xFF\
\x06\x23\xE2\xC2\xF8\
\x0F\xD2\xC2\x2B\xF6\
\x02\x2C\x9D\xBC\xFF\
\x0B\x62\x80\x62\xFF\
\x05\x3D\x1E\xFE\xFF\
\x11\xC9\x2A\xF6\xFF\
\x0F\x13\x02\xFE\xFF\
\x0F\xE2\x2B\xF6\xFF\
\x11\x61\xAC\x62\xFF\
\x0B\x00\x20\x60\xFF\
\x0F\xD2\xC9\xFB\xFF\
\x02\x2C\xBE\x62\xFF\
\x06\x0E\x3C\x20\xF5\
\x0B\x80\xB2\x90\xFA\
\x00\x08\xC6\xE0\xFF\
\x0B\x70\xBE\xFC\xFF\
\x0B\x60\x0C\xFE\xFF\
\x0B\x1B\x29\xF6\xFF\
\x09\xBE\x0D\xFE\xFF\
\x0B\xB2\x92\x62\xFF\
\x0B\x70\xC6\x88\xFF\
\x0B\x02\x61\xF5\xFF\
\x0F\xE0\xC2\xE0\xFF\
\x00\x08\xE7\xCB\xFF\
\x10\x1B\x16\xFD\xFF\
\x0F\xE1\x2B\xF6\xFF\
\x01\x10\xC2\xE0\xFF\
\x0B\x0B\x99\x0C\xFE\
\x10\x1B\xC6\xD1\xFF\
\x11\xD2\xC9\xEB\xFF\
\x0F\x03\x02\xFE\xFF\
\x00\x1E\xBC\x60\xFF\
\x03\x12\x3C\xE1\xFF\
\x01\x9D\xBD\xFF\xFF\
\x0F\x20\x3C\xFD\xFF\
\x11\xC2\x0B\xF6\xFF\
\x06\x1E\x8C\xFF\xFF\
\x0B\xB9\x9B\x62\xFF\
\x01\x0D\x2C\xFD\xFF\
\x02\xE8\xC2\x60\xFF\
\x02\x1E\x0D\xFE\xFF\
\x00\x18\xF6\xFF\xFF\
\x03\x22\x0C\xFE\xFF\
\x01\x9C\xBC\xFE\xFF\
\x02\xC0\xE0\xF5\xFF\
\x02\xD2\xD3\xFF\xFF\
\x02\x0C\xFE\xFF\xFF\
\x03\x12\x3D\xFD\xFF\
\x06\x13\x52\xFF\xFF\
\x0F\xD2\xC5\xC3\xFF\
\x0F\xE2\xFF\xFF\xFF\
\x02\x28\x1E\x9C\xFF\
\x0F\xC2\xC2\xD0\xFF\
\x0B\x60\x82\x62\xFF\
\x00\x2C\xE6\xEB\xFF\
\x02\x28\xF6\xFF\xFF\
\x0F\x62\xBC\xE2\xFF\
\x03\x82\x62\xF5\xFF\
\x0F\xE9\xEB\xFF\xFF\
\x0B\x62\x82\x62\xFF\
\x02\xC8\xE5\x39\xFF\
\x0B\x61\x0C\xFE\xFF\
\x03\xC1\xE0\xF5\xFF\
\x0B\x92\xBB\xFA\xFF\
\x01\x0C\xC2\xD3\xFF\
\x0B\x2B\x29\xF6\xFF\
\x03\x21\x0C\xFE\xFF\
\x0F\xC5\xC8\xC6\xF3\
\x0B\x71\xC6\x88\xFF\
\x10\xD9\xFB\xFF\xFF\
\x11\xD0\xE9\xEB\xFF\
\x11\xC1\x81\x62\xFF\
\x06\x03\x52\xFF\xFF\
\x0F\x60\xBC\xFE\xFF\
\x00\x0E\x0D\xFE\xFF\
\x0F\xC9\xEB\xFF\xFF\
\x00\x0C\xFE\xFF\xFF\
\x0F\x62\xBC\xFE\xFF\
\x10\xC0\xD2\xFF\xFF\
\x0F\x61\xBC\xFE\xFF\
\x0B\xE0\xC0\xF9\xFF\
\x00\xD2\xD3\xFF\xFF\
\x00\x1E\x0D\xFE\xFF\
\x0B\x60\xFF\xFF\xFF\
\x06\x2E\x8C\xFF\xFF\
\x0F\xE0\x80\x62\xFF\
\x02\x2C\xE6\xEB\xFF\
\x00\x28\xF6\xFF\xFF\
\x01\x9C\xBE\xFE\xFF\
\x06\xE8\xC2\x89\xFF\
\x01\x2C\xFE\xFF\xFF\
\x0F\xE1\x80\x62\xFF\
\x00\x28\x0E\x9C\xFF\
\x0B\x01\x20\x60\xFF\
\x06\x55\x6E\x53\xFF\
\x00\x0E\xBC\x62\xFF\
\x0B\x5C\x9E\xF3\xFF\
\x02\x1C\xBE\x62\xFF\
\x02\x0C\xC2\xD3\xFF\
\x0B\xB9\xAB\xFF\xFF\
\x00\x10\xC2\xE0\xFF\
\x05\x3C\xBE\x62\xFF\
\x0B\x2B\xBA\xAB\xFF\
\x11\xD1\xC9\xEB\xFF\
\x0F\xE5\xC3\xE0\xFF\
\x00\x9D\xBD\xFF\xFF\
\x0F\xC5\xD3\xFF\xFF\
\x11\xC1\x0B\xF6\xFF\
\x06\x0E\x8C\xFF\xFF\
\x0B\x62\x9E\xBC\xFF\
\x01\x0C\xFE\xFF\xFF\
\x00\x2C\xC6\xEB\xFF\
\x05\x4C\x21\xFE\xFF\
\x0F\xE5\x3B\x62\xFF\
\x01\x1E\x0D\xFE\xFF\
\x0B\x61\xFF\xFF\xFF\
\x0B\xE1\xC0\xF9\xFF\
\x01\xD2\xD3\xFF\xFF\
\x10\xE0\xD2\xFF\xFF\
\x00\x9C\xBC\xFE\xFF\
\x06\xE0\xC2\xF8\xFF\
\x0F\xE2\x82\x62\xFF\
\x02\x9C\xBE\xFE\xFF\
\x05\x9C\xBC\x3E\xFF\
\x0F\xE1\xFF\xFF\xFF\
\x03\x21\x81\x62\xFF\
\x0F\xC1\xC2\xD0\xFF\
\x01\x0E\xBC\x62\xFF\
\x03\x22\x1C\xFE\xFF\
\x05\x3E\x5C\x3C\xFF\
\x0F\x62\xBE\xFE\xFF\
\x01\x28\xF6\xFF\xFF\
\x0B\x23\x02\xF6\xFF\
\x05\x3C\x60\xBC\xFE\
\x0B\xB7\x92\x67\xFF\
\x03\x80\x62\xF5\xFF\
\x11\xC0\xC1\xE2\xFF\
\x0B\x02\x22\x60\xFF\
\x03\x90\x2B\xB6\xF5\
\x03\x21\x82\x62\xFF\
\x03\xC1\xE2\xF5\xFF\
\x11\xC5\x23\xBC\x62\
\x05\x3E\x5E\x3C\xFF\
\x0B\x00\x22\x60\xFF\
\x0A\xE0\xC0\x71\xFF\
\x05\x3D\x0E\xFE\xFF\
\x01\x1E\x2D\xFE\xFF\
\x11\x80\x72\xBC\xFF\
\x00\x1E\x2D\xFE\xFF\
\x03\x22\x80\x62\xFF\
\x11\xD1\xE2\xFF\xFF\
\x04\xD1\xD3\x11\xFF\
\x11\xC0\x2B\xB9\xAB\
\x10\xA9\xD5\xA3\xFB\
\x02\x1E\x2D\xFE\xFF\
\x11\xC2\x81\x62\xFF\
\x0B\x02\x60\xF5\xFF\
\x05\xC5\x86\x03\xF6\
\x11\xC0\xC0\xE0\xFF\
\x02\x38\x60\xF5\xFF\
\x03\xC0\xE0\xF5\xFF\
\x0B\x01\x60\xF5\xFF\
\x03\x20\x0C\xFE\xFF\
\x0B\x00\x60\xF5\xFF\
\x11\xC5\xD3\xE0\xFF\
\x0F\x2A\xAC\x0E\xF7\
\x02\x00\xC2\xE0\xFF\
\x0B\x03\x56\xFF\xFF\
\x01\xC8\xE5\x39\xFF\
\x0F\xE9\x2B\xFE\xFF\
\x05\x4C\x20\xE1\xFF\
\x0B\x61\x80\x62\xFF\
\x05\x3C\xE1\xFF\xFF\
\x02\x28\xB9\xAB\xFF\
\x00\x0C\xC2\xD3\xFF\
\x0B\x1B\x99\xFF\xFF\
\x05\x4C\x22\xE1\xFF\
\x0F\xD9\xEB\xFF\xFF\
\x0F\xE1\xC2\xE0\xFF\
\x0B\x20\x3C\x9E\xFF\
\x06\x02\x20\xF5\xFF\
\x02\x0C\xC6\xEB\xFF\
\x11\xD1\xE0\xFF\xFF\
\x09\xBE\xFC\xFF\xFF\
\x11\xD0\xE0\xFF\xFF\
\x02\x9C\xBC\xFE\xFF\
\x0F\xE0\xFF\xFF\xFF\
\x09\x5E\xBC\xC3\xFF\
\x03\x0C\x5E\xFF\xFF\
\x05\x3D\xFD\xFF\xFF\
\x0F\x61\xBE\xFE\xFF\
\x0B\x2E\x0C\xF6\xFF\
\x06\x23\x52\xFF\xFF\
\x0B\x62\x55\x6E\xF3\
\x0E\xC5\x93\xE2\xFF\
\x11\xC0\x2B\xF6\xFF\
\x0C\x09\x27\xB6\xFF\
\x0B\x62\xFF\xFF\xFF\
\x00\x9C\xBE\xFE\xFF\
\x11\xC2\x2B\xF6\xFF\
\x0B\xE2\xC0\xF9\xFF\
\x00\x20\x28\x56\xFF\
\x11\xC9\xFB\xFF\xFF\
\x0B\xE2\xC1\xF9\xFF\
'

        mtd5 = b'\
\x0B\x92\xBB\x09\x26\xFF\
\x11\x2B\xC6\xFF\xFF\xFF\
\x05\xE2\xC0\x03\xFF\xFF\
\x0B\x00\x62\xF5\xFF\xFF\
\x02\x0E\x0C\xFF\xFF\xFF\
\x02\x1E\x0C\xFF\xFF\xFF\
\x11\x0B\xC6\xFF\xFF\xFF\
\x03\x00\x5B\x29\x22\xFF\
\x11\x82\x60\xC2\x01\x22\
\x01\x3C\x10\xE2\x00\xFF\
\x04\x5B\x0A\x1B\x12\xFF\
\x03\x99\x80\xB0\x22\xF1\
\x02\x66\xC5\xE3\x88\xF1\
\x00\x20\x09\x2B\x12\xFF\
\x01\x00\x29\x0B\x22\xFF\
\x01\x00\x12\x20\x12\xFF\
\x11\xC2\x01\x20\xF1\xFF\
\x02\x5B\x3C\xCE\xFF\xFF\
\x11\xBB\x91\x09\x1C\xFF\
\x05\xB1\x93\x01\xF2\xFF\
\x10\xC9\x0B\x1C\xFF\xFF\
\x02\x1E\x08\x06\xFC\xFF\
\x09\xC5\xE3\x2B\xFF\xFF\
\x03\x90\xB2\x21\xF1\xFF\
\x0A\xBD\x1C\x9E\xAD\xFF\
\x0B\x99\x2B\x0B\xF9\xFF\
\x0B\x93\x93\xB5\x59\xFF\
\x0B\x00\x62\x29\x5B\xFF\
\x0B\x34\x89\x46\xFF\xFF\
\x02\xE6\xC5\xC3\x0B\xFF\
\x10\x8C\x66\xED\xFF\xFF\
\x00\x10\x29\x2B\xF2\xFF\
\x00\x3B\x5C\x5E\x29\xFF\
\x00\x10\x22\xFF\xFF\xFF\
\x02\x0E\x28\x06\x1C\xFF\
\x03\x21\xE2\xC0\xF1\xFF\
\x02\x0E\x08\x06\xFC\xFF\
\x0B\x67\x81\x67\xFF\xFF\
\x09\xC0\xE2\x0B\xFF\xFF\
\x0F\x5E\x3E\x09\xFF\xFF\
\x0B\x34\x8B\x46\xFF\xFF\
\x03\x29\x5B\xFF\xFF\xFF\
\x01\x2E\x08\x26\x0C\xFF\
\x01\x9E\xBE\x0D\xFF\xFF\
\x11\x82\x62\xC2\xF0\xFF\
\x0E\x22\x00\x29\xFF\xFF\
\x03\x90\xB0\x22\xF2\xFF\
\x04\x5B\x29\x12\xFF\xFF\
\x10\x8C\x68\xED\xFF\xFF\
\x00\x20\x22\xFF\xFF\xFF\
\x00\x8B\x5C\x3E\x93\xF1\
\x00\xB1\x95\x15\xFF\xFF\
\x00\x1E\x28\x06\x0C\xFF\
\x00\x20\x29\x2B\xF2\xFF\
\x03\x90\xB0\x20\xF2\xFF\
\x0F\x61\xBE\xE1\xF0\xFF\
\x0C\xE2\xB0\x0B\xC6\xFF\
\x0C\xE2\xC0\xFE\xFF\xFF\
\x11\xBB\x92\x62\xC0\xF1\
\x02\x52\xC6\x6B\xF3\xFF\
\x11\xB0\x25\x00\xCC\xFF\
\x11\xC1\x00\x22\xF1\xFF\
\x01\xB0\x93\x24\xFF\xFF\
\x00\xC6\xE5\x3B\xFF\xFF\
\x0C\xBB\x09\x26\xF8\xFF\
\x03\x09\x5B\xFF\xFF\xFF\
\x01\xE2\xD2\x00\xE2\xFF\
\x00\x0E\x0C\x20\x12\xFF\
\x0B\x2B\x09\x06\xFF\xFF\
\x00\x00\x29\x2B\xF2\xFF\
\x02\x9D\xBC\x1C\xFF\xFF\
\x03\x99\x81\x2B\x12\xFF\
\x11\xBC\xBE\x9C\xEC\xFF\
\x0F\x00\x22\x2E\xFF\xFF\
\x10\xC9\x2A\x16\x1C\xFF\
\x0C\x09\x28\x2B\xFF\xFF\
\x09\xBE\x60\xBC\x23\xF2\
\x03\x99\x80\xB2\x22\xFF\
\x02\x0E\x1C\x20\x22\xFF\
\x01\x2E\x0C\x20\x12\xFF\
\x0D\x58\x33\x59\xF9\xFF\
\x04\x53\x00\x45\xF2\xFF\
\x0C\xB1\xB1\x93\xF5\xFF\
\x03\x20\x02\x20\xF2\xFF\
\x04\x5B\x39\x5B\x59\xFF\
\x03\xBA\x9B\x5B\xF1\xFF\
\x03\x10\x2E\x0C\x20\xFF\
\x09\x9E\x6C\x8E\xF7\xFF\
\x11\x1B\x0B\x99\x1C\xFF\
\x0C\x60\x82\x2B\xFF\xFF\
\x03\x09\x0B\x12\xFF\xFF\
\x00\x00\x02\x0E\xFC\xFF\
\x00\x1C\xE6\x1B\x1E\xFF\
\x11\xE5\xC2\x00\x1C\xFF\
\x0C\xB0\xE5\xC2\x23\xFF\
\x01\x2E\x2C\x20\x12\xFF\
\x03\x21\xE2\xC1\xFF\xFF\
\x02\xEC\xE5\x93\xFF\xFF\
\x09\x0E\x2C\x38\x22\xFF\
\x09\x5C\xBE\x23\xFF\xFF\
\x00\x8B\x34\x2A\xFB\xFF\
\x02\x2E\x2C\x0E\xFC\xFF\
\x02\xC0\xB3\xE5\x5C\xFF\
\x03\x3B\x49\xE2\xC0\xF1\
\x03\xB0\x93\x24\xFF\xFF\
\x01\x20\xE2\xC2\xF1\xFF\
\x0B\x23\x09\x9B\x20\xF1\
\x01\x2D\x08\xC7\xCB\xFF\
\x0C\xEA\xBA\x61\xBC\xFF\
\x11\x03\x29\x5B\x1C\xFF\
\x0C\x60\x82\x60\x82\xFB\
\x03\x20\xE0\xC1\xF0\xFF\
\x11\xC2\x23\xF2\xFF\xFF\
\x11\xC2\xE2\xC1\xF1\xFF\
\x03\x20\xE0\xC0\xF0\xFF\
\x03\x20\xF1\xFF\xFF\xFF\
\x11\xB1\xC0\x92\xFF\xFF\
\x11\xC0\xE0\xC0\xFF\xFF\
\x0F\x03\x22\x2E\xFF\xFF\
\x00\x20\x29\x5B\xF1\xFF\
\x03\x91\xB2\x20\xF2\xFF\
\x09\x0E\x9E\xBD\x82\xFF\
\x03\x82\xB5\x92\x60\xFF\
\x03\x12\xE2\xC0\xF3\xFF\
\x00\x1E\x08\xC6\xF2\xFF\
\x00\x20\x02\x0E\xFC\xFF\
\x05\x3C\x1E\x0E\xFC\xFF\
\x11\x82\x2B\x29\xC6\xFF\
\x03\xB1\x93\xF4\xFF\xFF\
\x03\x9E\x5C\xBD\xFD\xFF\
\x11\x5E\x02\xC0\x2C\xFF\
\x0E\x23\x02\x19\xFF\xFF\
\x03\x92\xB0\x22\xFF\xFF\
\x03\x22\x00\x20\xF1\xFF\
\x0F\xE5\x04\x12\xFF\xFF\
\x01\x0E\x18\xC6\xFF\xFF\
\x02\xBE\x61\x2C\xFF\xFF\
\x02\x8D\x0C\x6E\xFD\xFF\
\x01\x0E\x08\xC6\xFF\xFF\
\x01\x0E\xFC\xFF\xFF\xFF\
\x00\xC2\xD3\xC1\xF0\xFF\
\x00\xC2\xE3\xF0\xFF\xFF\
\x02\x90\xB2\x22\xF1\xFF\
\x02\x10\x02\x1E\x0C\xFF\
\x03\x91\xB2\x25\xFF\xFF\
\x02\x0E\x2C\x0E\xFC\xFF\
\x0D\xC3\xE5\x5C\x29\xFF\
\x02\x10\x12\xFF\xFF\xFF\
\x11\xC0\x02\x20\xF1\xFF\
\x03\x91\xB1\x22\xFF\xFF\
\x00\x2E\x1C\x0E\xFC\xFF\
\x03\x19\x0B\x12\xFF\xFF\
\x11\x81\x61\x1C\xFF\xFF\
\x0E\xC5\xE5\x94\xF1\xFF\
\x0E\x25\x00\x29\xFF\xFF\
\x11\x82\x60\x2C\xFF\xFF\
\x03\x92\xB2\x22\xF1\xFF\
\x03\x22\xE2\xC0\xFF\xFF\
\x11\xE1\xC9\xCB\xFF\xFF\
\x01\x00\x22\x0E\x1C\xFF\
\x0E\xB3\x55\x33\xFA\xFF\
\x00\x20\x02\x20\xF2\xFF\
\x09\x5C\x3C\xBD\xF1\xFF\
\x00\x31\x25\x50\xF4\xFF\
\x11\xB3\xC5\x94\xF4\xFF\
\x03\x20\x00\x21\xF1\xFF\
\x0E\x23\xB0\x94\x90\xFF\
\x0A\xC6\xE8\xCB\xFB\xFF\
\x03\x19\x26\xB8\x15\xFF\
\x0A\x5E\xBC\xC3\x0B\xFF\
\x09\x0C\x2E\x08\xFF\xFF\
\x01\x20\x29\x5B\xFF\xFF\
\x09\xC3\xE0\x82\x05\xFF\
\x11\xC2\x02\x22\xF2\xFF\
\x11\xC0\x9C\x80\xB2\xFF\
\x01\x00\x02\x0E\x1C\xFF\
\x11\xE9\xDB\x00\x22\xF1\
\x00\x1E\x2C\x10\x22\xFF\
\x11\x1B\x26\x1C\xFF\xFF\
\x01\x20\x19\x5B\xFF\xFF\
\x03\x90\x09\x08\x5B\xFF\
\x11\xC2\x02\x21\xF2\xFF\
\x02\x0E\x5D\x3E\xF2\xFF\
\x11\xC1\x00\x21\xFF\xFF\
\x11\x62\xBE\x0D\xFF\xFF\
\x11\x81\x60\x0C\xFF\xFF\
\x03\x91\xB1\x15\xFF\xFF\
\x02\x90\xB0\x15\xFF\xFF\
\x11\x61\xBE\xFD\xFF\xFF\
\x03\x20\x0E\xFC\xFF\xFF\
\x11\x81\x60\xC2\xF0\xFF\
\x00\x00\x02\x20\xF2\xFF\
\x03\x2E\x08\xC6\x15\xFF\
\x11\x9A\xB9\xC9\xF1\xFF\
\x03\x09\x26\xB8\x15\xFF\
\x02\x5C\x3E\xF2\xFF\xFF\
\x11\xC0\xE2\xC2\xF1\xFF\
\x03\x22\x02\x22\xFF\xFF\
\x02\x0E\x2C\x20\xF2\xFF\
\x00\x5E\x9E\xBC\xC3\xFF\
\x0B\xB2\x90\xB2\x90\xF9\
\x11\xD2\x03\x22\x0E\xFF\
\x0C\x29\xB8\x05\x00\xFF\
\x02\x00\xE2\xC2\xF1\xFF\
\x05\x3C\x2D\x1C\xFF\xFF\
\x05\x2E\x0C\x00\xFF\xFF\
\x0F\xE5\x13\x20\xF2\xFF\
\x02\x66\x8D\x07\xF6\xFF\
\x05\x01\x01\xB1\x95\xFF\
\x10\xC9\xEB\xC9\xCB\xFF\
\x02\x12\x3B\x19\x10\xFF\
\x02\x00\x12\x20\xF2\xFF\
\x03\x01\x5B\x59\xFF\xFF\
\x03\x61\x22\x80\xFF\xFF\
\x02\x10\x29\x5B\xF0\xFF\
\x0E\xC5\xE3\x0C\xFF\xFF\
\x01\x01\x29\x5A\x59\xFF\
\x11\xC2\xE0\xC2\xF0\xFF\
\x02\x2E\x2C\x20\xF2\xFF\
\x11\x81\x61\xC0\xFF\xFF\
\x11\xC0\x00\x22\xFF\xFF\
\x11\xC2\xF1\xFF\xFF\xFF\
\x11\xD0\x00\x22\xFE\xFF\
\x00\x56\x3C\xBE\xFF\xFF\
\x01\x0E\x3C\x20\xF1\xFF\
\x09\xD6\x78\x60\xF2\xFF\
\x0B\xB2\x90\x09\xFF\xFF\
\x00\x1E\x1C\xFF\xFF\xFF\
\x03\x90\xB2\x05\xFF\xFF\
\x01\x20\xF2\xFF\xFF\xFF\
\x09\x0E\x2C\x18\xFF\xFF\
\x0E\x23\x02\xCE\xC0\xFF\
\x11\x0C\x28\xB6\xC2\xF1\
\x10\xD9\xE3\xCB\xF5\xFF\
\x11\x2B\x26\x1C\xFF\xFF\
\x03\x22\xE0\xC2\xF1\xFF\
\x11\x80\x60\xC0\xF1\xFF\
\x01\xB1\x95\x22\xF2\xFF\
\x11\x80\x62\xC0\xFF\xFF\
\x05\x35\x21\x33\xF1\xFF\
\x03\x90\xB2\x25\xFF\xFF\
\x02\x10\x29\x2B\xF2\xFF\
\x02\x3B\x5C\x5E\x29\xFF\
\x03\x20\x00\x22\xF1\xFF\
\x00\x0E\x08\x06\xFC\xFF\
\x02\x10\x22\xFF\xFF\xFF\
\x05\x3C\x0E\x0E\x1C\xFF\
\x11\x82\x60\x0C\xFF\xFF\
\x01\x00\x09\x2B\x22\xFF\
\x11\x62\xBE\xFD\xFF\xFF\
\x03\x91\xB2\x22\xF1\xFF\
\x11\xE9\xDB\xF0\xFF\xFF\
\x11\xC2\x00\x21\xFF\xFF\
\x11\xC2\x13\xF2\xFF\xFF\
\x11\x82\x60\xC2\xF0\xFF\
\x04\x5B\x2A\x5B\xF1\xFF\
\x05\x2E\x0C\x20\xFF\xFF\
\x02\xC6\xE5\x3B\xFF\xFF\
\x11\x80\x60\xC2\xF1\xFF\
\x02\x00\x29\x2B\xF2\xFF\
\x05\x3C\x0D\x1C\xFF\xFF\
\x02\x00\x22\xFF\xFF\xFF\
\x05\x2E\x0D\x20\xFE\xFF\
\x0F\x03\x22\x0E\xFF\xFF\
\x04\x20\x1E\x3C\x12\xFF\
\x11\xE1\x2B\x06\xFD\xFF\
\x03\x92\xB0\x20\xF1\xFF\
\x03\x09\x3A\x49\xF1\xFF\
\x0D\x58\x33\x59\x29\xFF\
\x0C\x60\x82\x0B\xFF\xFF\
\x0F\x03\x22\x1D\x0C\xFF\
\x00\x2E\x0C\xFF\xFF\xFF\
\x0B\xB2\x90\x29\xFF\xFF\
\x00\x1E\x0C\xFF\xFF\xFF\
\x03\x20\x1E\xFC\xFF\xFF\
\x01\x08\x20\x56\xFF\xFF\
\x00\x0E\x0C\xFF\xFF\xFF\
\x01\xFF\xFF\xFF\xFF\xFF\
\x05\x3C\x0E\x10\xF2\xFF\
\x0F\x03\x21\x0E\xF0\xFF\
\x05\x2E\x0C\x11\x22\xFF\
\x0F\xE5\x23\x20\x12\xFF\
\x03\x90\xB2\x20\xF2\xFF\
\x09\x4D\x3E\xBE\x01\xF2\
\x0F\xE0\xE2\x61\xBC\xFF\
\x0F\xE5\x23\x1E\xFC\xFF\
\x05\xB1\x94\x11\x21\xF2\
\x0F\xE5\x24\x12\xFF\xFF\
\x05\x2E\x0C\x21\x22\xFF\
\x02\x20\x29\x2B\xF2\xFF\
\x03\x20\xE2\xC1\xFF\xFF\
\x02\xE6\xD5\xC3\xFB\xFF\
\x01\xCD\x88\xD6\xFE\xFF\
\x02\x20\x22\xFF\xFF\xFF\
\x11\xC1\x9C\x80\xB2\xFF\
\x00\x52\xC6\x6B\xF3\xFF\
\x11\x2B\xE7\xDB\xF1\xFF\
\x11\xC2\xE2\xC0\xF1\xFF\
\x03\x3B\x49\xF2\xFF\xFF\
\x02\x5C\x2E\x0E\x3C\xFF\
\x05\x65\xBE\x36\xF1\xFF\
\x01\x29\x0E\xEC\xFF\xFF\
\x0E\xD4\xE3\x93\xE1\xF0\
\x00\x5B\x3C\xCE\xFF\xFF\
\x03\x01\x09\x2B\xF1\xFF\
\x00\x1E\x08\x06\xFC\xFF\
\x03\xB0\x93\xF4\xFF\xFF\
\x03\x20\x01\x22\xF1\xFF\
\x11\xC0\x01\x22\xFF\xFF\
\x00\xC2\x03\x20\xE2\xFF\
\x00\x3B\x4C\x5E\xF9\xFF\
\x03\x92\xB2\x20\xF1\xFF\
\x05\x65\xBC\x36\xF1\xFF\
\x00\xE6\xC5\xC3\x0B\xFF\
\x0E\x24\x02\x91\xF2\xFF\
\x11\x81\x62\xC0\xFF\xFF\
\x0F\xB4\xE3\x94\x15\xFF\
\x0F\x00\x12\x3E\xF2\xFF\
\x01\x48\x93\x68\xF4\xFF\
\x09\xE0\xC2\xFB\xFF\xFF\
\x0C\x09\x28\x0B\xFF\xFF\
\x03\x22\xE0\xC1\xF1\xFF\
\x03\x29\x5B\xF0\xFF\xFF\
\x01\x00\x12\xFF\xFF\xFF\
\x00\x91\xB0\x12\xFF\xFF\
\x03\x22\x01\x22\xFF\xFF\
\x03\x99\x80\x5B\xFF\xFF\
\x02\x20\x02\x0E\xFC\xFF\
\x10\x98\xB9\xC6\xC0\xFF\
\x02\x20\x29\x5B\xF1\xFF\
\x03\xBA\x9B\xB2\xF5\xFF\
\x00\x00\x29\x0B\x12\xFF\
\x02\x1E\x08\xC6\xF2\xFF\
\x03\x90\xA2\x93\x14\xFF\
\x11\xE0\x8C\x66\xED\xFF\
\x00\x10\x12\xFF\xFF\xFF\
\x01\x0E\x2C\x00\x12\xFF\
\x05\x12\x12\x01\xF2\xFF\
\x00\x20\xE2\xC1\xFF\xFF\
\x01\x10\x19\x2B\xF2\xFF\
\x02\x2E\x1C\x0E\xFC\xFF\
\x00\x0E\x2C\x0E\xFC\xFF\
\x00\x2E\x0C\x00\x12\xFF\
\x11\x2B\xC6\xF0\xFF\xFF\
\x11\x2B\x0B\x29\xC6\xFF\
\x11\x2B\x26\x0C\xFF\xFF\
\x03\xBA\x9B\x5B\xFF\xFF\
\x01\x20\x22\x0E\xFC\xFF\
\x11\x2B\x16\x0C\xFF\xFF\
\x11\x9B\xBB\xCA\xFF\xFF\
\x11\x2B\x06\x0C\xFF\xFF\
\x11\xC1\x03\x22\xFF\xFF\
\x0C\xEA\xBA\xC9\x1B\xFF\
\x09\x5D\x3E\xBE\xFF\xFF\
\x10\x2B\x06\x1C\xFC\xFF\
\x01\x00\x22\x00\x22\xFF\
\x11\x92\xE9\xDB\x2E\xFF\
\x11\xC2\x00\x22\xF1\xFF\
\x09\x70\x99\x0A\xF9\xFF\
\x0F\x00\x22\x0E\xFF\xFF\
\x01\x90\xB0\x20\xF1\xFF\
\x11\xC9\xE0\x82\xFC\xFF\
\x0F\xE0\xBB\x92\x09\xFF\
\x02\x00\x02\x0E\xFC\xFF\
\x0F\x00\x22\x0D\x0C\xFF\
\x03\x10\x3C\x0D\xFC\xFF\
\x03\x99\x80\xB1\xF5\xFF\
\x00\x08\x20\x56\xF2\xFF\
\x01\x20\x09\x2B\xF2\xFF\
\x00\x00\x22\x10\x12\xFF\
\x00\xB1\x95\x21\xF1\xFF\
\x02\x00\x22\x00\x12\xFF\
\x01\x10\x3B\x49\xFF\xFF\
\x02\x28\x67\x8D\xF8\xFF\
\x03\x99\x80\xB0\xF5\xFF\
\x11\xC0\xFF\xFF\xFF\xFF\
\x10\xC9\x0B\x0C\xFF\xFF\
\x11\x80\x62\xFC\xFF\xFF\
\x00\x90\xB2\x22\xF1\xFF\
\x11\x80\x61\xFC\xFF\xFF\
\x00\xBE\x61\x2C\xFF\xFF\
\x11\xB1\xC0\x92\xF2\xFF\
\x11\x80\x60\xFC\xFF\xFF\
\x03\x60\x22\x80\xFF\xFF\
\x00\x0E\x3C\x09\x2B\xF2\
\x0E\x93\xB0\x95\xFF\xFF\
\x00\xC0\xB3\xE5\x5C\xFF\
\x11\xC2\x02\x22\xF1\xFF\
\x03\x00\x5B\x59\xFF\xFF\
\x01\xC6\xE5\x3B\xF2\xFF\
\x02\x8B\x34\x2A\xFB\xFF\
\x03\x22\x2E\x1C\xFF\xFF\
\x03\x90\xA1\x93\x24\xFF\
\x09\x9C\xBC\x9C\xAD\xFF\
\x00\x1E\xBC\x2B\x09\xF6\
\x03\x20\xD2\xC9\xCB\xFF\
\x05\x3C\x1D\xFC\xFF\xFF\
\x10\x82\x70\xBC\xFC\xFF\
\x03\x92\x29\xB8\x15\xFF\
\x09\x0E\x2C\xF8\xFF\xFF\
\x00\x0E\x2C\x20\xF2\xFF\
\x09\xBE\x62\xBC\xFF\xFF\
\x0E\xB5\x95\xB5\xA4\xFF\
\x03\x92\xB0\xF5\xFF\xFF\
\x01\x0E\x2C\x2E\x1C\xFF\
\x0E\xC4\xE3\x93\xFF\xFF\
\x03\x5B\x02\x90\xF5\xFF\
\x0B\x2B\x09\x26\xFF\xFF\
\x04\x83\x9B\x58\x22\xFF\
\x02\x5E\x9E\xBC\xC3\xFF\
\x02\x10\x92\x09\x28\xFB\
\x00\x00\xE2\xC2\xF1\xFF\
\x01\xC2\xD3\xC2\xF1\xFF\
\x04\x09\x2B\x12\xF2\xFF\
\x0F\x23\xE2\x0B\x26\xFF\
\x02\x1E\x1C\xFF\xFF\xFF\
\x03\x09\x5B\xF2\xFF\xFF\
\x03\x82\x20\x62\xFF\xFF\
\x11\xC0\x03\x12\xFF\xFF\
\x03\x22\xFF\xFF\xFF\xFF\
\x02\x29\x0E\xEC\xF0\xFF\
\x03\x21\x2E\x0C\xFF\xFF\
\x05\xE2\xC0\x23\xFF\xFF\
\x01\x20\x02\x2E\x1C\xFF\
\x03\x09\x26\x08\x5B\xFF\
\x02\x20\xE2\x2B\x06\xFC\
\x11\x82\x71\xBE\x0D\xFF\
\x04\x5B\x29\x22\xFF\xFF\
\x01\x0E\x28\x06\xFC\xFF\
\x05\x01\x01\x5B\x19\xFF\
\x01\xBE\x62\xC2\xF1\xFF\
\x02\x20\x02\x20\xF2\xFF\
\x03\xB9\x99\x5A\xFF\xFF\
\x09\x80\x60\x81\xFF\xFF\
\x11\x82\x70\xBE\x1D\xFF\
\x03\x22\x00\x21\xF2\xFF\
\x00\x09\x8A\x34\xF9\xFF\
\x03\x20\xE2\xC0\xF1\xFF\
\x11\xD2\xE5\x24\xF2\xFF\
\x02\x1E\x2C\x20\x22\xFF\
\x03\x09\x2B\x22\xFF\xFF\
\x11\xBB\x92\xC9\xFF\xFF\
\x03\x82\x33\x8B\x46\xFF\
\x03\x92\xB2\xF5\xFF\xFF\
\x11\xBB\x92\x62\xFC\xFF\
\x04\x5B\x2A\x2B\xF2\xFF\
\x11\xBB\x92\x61\xFC\xFF\
\x00\x00\x12\x20\xF2\xFF\
\x03\x09\x1B\x22\xFF\xFF\
\x02\xBD\x62\xD0\xFF\xFF\
\x00\x10\x29\x5B\xF0\xFF\
\x00\x66\x8D\x07\xF6\xFF\
\x11\x80\x0B\x99\x1C\xFF\
\x03\x80\x3B\x99\x04\xFF\
\x05\xE2\xC0\x24\x22\xFF\
\x01\x1E\x18\x06\xFC\xFF\
\x01\x0E\x0C\x20\xF2\xFF\
\x01\x2E\x1C\xFF\xFF\xFF\
\x02\x2E\x08\x26\x1C\xFF\
\x01\x5B\x3C\xCE\xF0\xFF\
\x04\x90\xA2\x95\xF5\xFF\
\x01\x2E\x0C\x2E\x0C\xFF\
\x00\x2E\x2C\x20\xF2\xFF\
\x0F\xD0\xD0\xE1\xF0\xFF\
\x03\x09\x0B\x22\xFF\xFF\
\x11\xC0\x02\x21\xF1\xFF\
\x00\x0E\x5D\x3E\xF2\xFF\
\x03\x20\xE0\xC0\xF1\xFF\
\x11\xC2\x10\x5B\x59\xFF\
\x03\x92\xB1\xF5\xFF\xFF\
\x00\x2E\x0C\x2E\x1C\xFF\
\x02\x0E\x3C\x21\xFF\xFF\
\x0C\xE9\xC9\xBA\xFF\xFF\
\x11\x0B\xC6\xF2\xFF\xFF\
\x11\x9A\xB9\x60\xFC\xFF\
\x11\xE2\xC9\xCB\xFF\xFF\
\x0F\xE5\x14\xF2\xFF\xFF\
\x00\x90\xB0\x15\xFF\xFF\
\x01\x1E\xE6\xDB\xFF\xFF\
\x09\x5C\xBE\xF3\xFF\xFF\
\x03\x20\xE1\xC0\xF0\xFF\
\x03\x20\xF2\xFF\xFF\xFF\
\x00\xE2\xD2\x00\xE2\xFF\
\x03\x90\xB2\x22\xFF\xFF\
\x09\xBE\x61\xBC\xFF\xFF\
\x11\xC0\x00\x22\xF1\xFF\
\x0E\x25\x00\xF9\xFF\xFF\
\x03\x19\x5B\xE2\xC0\xFF\
\x04\xC1\xE5\x11\xF2\xFF\
\x09\xC0\xE2\x1B\xFF\xFF\
\x03\x19\x16\x08\x2B\xF2\
\x03\x92\xB1\x21\xF1\xFF\
\x11\x93\xB0\x22\xC1\xFF\
\x03\x09\x2B\x12\xFF\xFF\
\x11\x82\x60\x29\x0C\xFB\
\x01\x1E\x0C\xFF\xFF\xFF\
\x02\xBE\x60\xFC\xFF\xFF\
\x02\xFF\xFF\xFF\xFF\xFF\
\x0B\x82\x99\x0B\xF6\xFF\
\x10\x82\x60\xFD\xFF\xFF\
\x01\x0E\x0C\xFF\xFF\xFF\
\x01\x2E\x0C\xFF\xFF\xFF\
\x11\x82\x60\xFC\xFF\xFF\
\x03\x92\xB0\x22\xF1\xFF\
\x00\x00\x29\x0B\x22\xFF\
\x03\xB0\x93\x25\xF2\xFF\
\x0E\x28\x01\x30\x1A\xFB\
\x03\x11\xE2\xC0\x13\xFF\
\x04\x6D\x98\x89\x4D\xFF\
\x03\x91\xB1\x21\xF1\xFF\
\x0C\xD7\x68\xD6\xB7\xFF\
\x01\x1E\x08\x06\xFC\xFF\
\x00\x00\x3B\x49\xFF\xFF\
\x00\x00\x12\x20\x12\xFF\
\x00\x0E\x1C\x20\xF2\xFF\
\x0B\xB2\x90\x39\x22\xFF\
\x02\x9D\xBC\xC0\xF1\xFF\
\x01\x5B\x3C\xCE\xFF\xFF\
\x11\x9A\xB9\x60\xC0\xFF\
\x01\xE6\xC5\xC3\x0B\xFF\
\x02\xCD\x68\xD6\xFE\xFF\
\x00\x1E\x28\x06\xFC\xFF\
\x05\x4C\x5B\x4E\x49\xF2\
\x0E\xC3\xE3\x95\xF2\xFF\
\x02\x48\x93\x68\xF4\xFF\
\x0E\x93\x25\x02\x20\xFF\
\x0F\x6E\x53\xCE\xF2\xFF\
\x03\x92\xB2\x22\xFF\xFF\
\x10\x98\xBB\xD6\xFF\xFF\
\x09\x5E\x3D\xBC\xFF\xFF\
\x0F\x6E\x55\xCE\xF2\xFF\
\x03\x22\xF2\xFF\xFF\xFF\
\x0E\xC8\xE5\x33\x19\xFF\
\x04\x5B\x59\xF1\xFF\xFF\
\x11\x81\x62\xC0\xF0\xFF\
\x03\x90\xB1\x21\xF1\xFF\
\x00\xB0\x93\x24\xFF\xFF\
\x0F\xE5\xE2\xC0\xF3\xFF\
\x00\x52\xE6\x6B\x13\xFF\
\x03\x3B\x59\x22\xFF\xFF\
\x0E\xC5\x33\x54\xCE\xF2\
\x01\x52\xC6\x6B\xF3\xFF\
\x0E\xC3\xE4\x95\xF2\xFF\
\x0E\x96\xB1\x98\xF2\xFF\
\x0C\x60\x82\xFB\xFF\xFF\
\x03\x91\xB2\x22\xFF\xFF\
\x0E\xC3\xE5\x95\xF2\xFF\
\x03\x21\xF2\xFF\xFF\xFF\
\x01\x0E\x28\x06\x1C\xFF\
\x03\x21\xE1\xC1\xF0\xFF\
\x0F\x6E\x54\xCE\xF2\xFF\
\x05\xE2\xC0\x13\xFF\xFF\
\x0C\xC9\xE9\xEB\xBB\xFF\
\x05\x65\xBE\x36\xFF\xFF\
\x02\x48\xB3\x68\xF4\xFF\
\x02\x90\xB2\xF5\xFF\xFF\
\x05\xB1\x94\x01\xF1\xFF\
\x00\x9E\xBE\x0D\xFF\xFF\
\x00\x2E\x0C\x10\xF2\xFF\
\x09\x23\x29\x1B\x58\xFF\
\x01\x20\xE2\xC1\xFF\xFF\
\x01\x0E\x2C\x0E\xFC\xFF\
\x09\x25\x0E\x3C\x80\xFF\
\x02\x10\x19\x2B\xF2\xFF\
\x11\xC2\xE1\xC0\xFF\xFF\
\x01\x10\x12\xFF\xFF\xFF\
\x11\xD0\xE5\x24\xF2\xFF\
\x03\x21\xE0\xC0\xFF\xFF\
\x0C\xEA\xCB\xBB\xF0\xFF\
\x05\x9E\xBE\x3D\xF0\xFF\
\x05\x2E\x0C\x10\xFF\xFF\
\x03\x91\xB2\x15\xFF\xFF\
\x11\x81\x2B\x99\xFC\xFF\
\x00\xBE\x62\x0C\xFF\xFF\
\x02\x20\x29\x2B\x12\xFF\
\x0F\xB4\x95\xE5\xF0\xFF\
\x00\xBD\x62\xC0\xC1\xFF\
\x00\x2E\x0C\x20\x12\xFF\
\x02\x8A\x35\x93\x95\xFF\
\x02\x00\x22\x00\x22\xFF\
\x0C\x6A\x8C\xB7\xF0\xFF\
\x0C\xB1\x92\xB2\xF0\xFF\
\x0F\xE5\xC3\xE5\x23\xFF\
\x05\x3C\x20\xE2\x00\xFF\
\x0E\x05\x90\x29\x18\xFF\
\x02\xE6\xC9\xE6\x78\xFF\
\x00\x90\x09\x18\x5B\xFF\
\x03\x20\xE0\xC0\xFF\xFF\
\x0F\x61\xBE\xE1\xF1\xFF\
\x03\x3B\x49\xF1\xFF\xFF\
\x02\x90\xB0\x20\xF1\xFF\
\x00\x3B\x09\x5B\xF9\xFF\
\x01\xC0\xB3\xE5\x5C\xFF\
\x00\x2E\x2C\x20\x12\xFF\
\x0F\x20\xE2\x00\xF0\xFF\
\x02\xC6\xE5\x3B\xF2\xFF\
\x0E\x48\xA3\xB2\xFF\xFF\
\x01\xEC\xE5\x93\xFF\xFF\
\x0C\xE2\xC0\x2E\x20\xF2\
\x05\x4C\x20\xD2\xC0\xFF\
\x05\x11\xB0\xA5\xB2\xFF\
\x05\x3C\x2D\x08\x06\xFC\
\x00\xC2\xD3\xC1\xFF\xFF\
\x00\x2D\x08\xC7\xCB\xFF\
\x0E\xC5\xE3\x0C\x0E\xFC\
\x00\x20\xE2\xC2\xF1\xFF\
\x03\x9A\x9E\xAC\x5A\xF0\
\x02\x20\x02\x00\x12\xFF\
\x02\x5C\x4E\x20\xF1\xFF\
\x03\x20\x02\x20\xF1\xFF\
\x02\x10\x3B\x49\xFF\xFF\
\x0B\x72\xD6\x88\xFF\xFF\
\x00\x90\x09\x08\x5B\xFF\
\x10\x21\x3D\xD1\xFF\xFF\
\x0F\xE5\x23\x20\xF2\xFF\
\x05\x3C\x0E\xFF\xFF\xFF\
\x11\xC2\x03\x12\xFF\xFF\
\x05\x3C\x2D\x0C\xFF\xFF\
\x11\x2B\xC6\xF1\xFF\xFF\
\x11\xC1\xE2\xC1\xF1\xFF\
\x00\x0E\x08\xC6\xFF\xFF\
\x00\x0E\xFC\xFF\xFF\xFF\
\x05\x3C\x1D\x0C\xFF\xFF\
\x0B\x00\x62\x05\xFF\xFF\
\x09\x0C\x2E\x18\xFF\xFF\
\x03\x09\x9B\x22\x80\xFF\
\x01\xC2\xE3\xF2\xFF\xFF\
\x0B\x62\x82\x61\xF0\xFF\
\x00\x90\x09\xB8\xF5\xFF\
\x02\x00\x12\xFF\xFF\xFF\
\x0C\x6A\x8D\xB7\xFF\xFF\
\x03\x22\xE0\xC0\xFF\xFF\
\x11\x1B\xE7\xDB\xF1\xFF\
\x03\x92\xB2\x15\xFF\xFF\
\x11\x80\x61\x1C\xFF\xFF\
\x0E\x23\x02\x09\x0E\xFC\
\x11\x71\x99\x9B\xFC\xFF\
\x02\x20\x21\x0E\x3C\xFF\
\x11\x81\x60\x2C\xFF\xFF\
\x09\xC5\xE3\xFB\xFF\xFF\
\x00\x0E\x3C\x20\xF1\xFF\
\x05\x01\x20\x00\xF0\xFF\
\x0E\x22\x00\xF9\xFF\xFF\
\x00\x20\xF2\xFF\xFF\xFF\
\x0C\xE2\xC0\x0E\xFF\xFF\
\x11\xC1\xF1\xFF\xFF\xFF\
\x0F\x00\x22\xFE\xFF\xFF\
\x03\x22\xBE\x62\xC0\xFF\
\x03\x92\x62\x81\x5B\xF2\
\x0E\x91\x91\xBB\x29\xFF\
\x02\xBE\x62\xC2\xF1\xFF\
\x00\xB1\x95\x22\xF2\xFF\
\x02\x0E\x28\x06\xFC\xFF\
\x02\x20\x02\x2E\x1C\xFF\
\x02\x0E\x08\x06\x1C\xFF\
\x03\x22\x1E\x1C\xFF\xFF\
\x03\x22\x0C\x20\xE2\xFF\
\x05\x3C\x0E\x00\x12\xFF\
\x03\x22\x2B\x02\x90\xFF\
\x04\x53\x02\x45\xFF\xFF\
\x11\xC0\xE2\xC0\xF1\xFF\
\x03\x22\x00\x22\xFF\xFF\
\x0C\xE9\xC9\xBA\xF0\xFF\
\x0F\xE0\xBB\x92\xF9\xFF\
\x03\x29\x06\x28\x5B\xFF\
\x02\x67\x8C\xBE\xBC\xFF\
\x09\xE5\x3B\x61\xBE\xFF\
\x00\x20\x29\x5B\xFF\xFF\
\x0B\x7A\x45\x9B\xFB\xFF\
\x11\xC1\x02\x22\xF2\xFF\
\x0C\x09\x28\xFB\xFF\xFF\
\x05\x11\x10\x00\xF1\xFF\
\x01\x0E\x5D\x3E\xF2\xFF\
\x00\x00\x02\x0E\x1C\xFF\
\x00\x2E\x0C\xB1\x95\xF5\
\x00\x20\x19\x5B\xFF\xFF\
\x10\x21\x3E\xD1\xF1\xFF\
\x11\xC1\x02\x21\xF2\xFF\
\x00\x90\xB0\x20\xF2\xFF\
\x0F\xE5\x03\xFF\xFF\xFF\
\x04\x83\x9B\x48\xFF\xFF\
\x03\x90\xB1\x05\xFF\xFF\
\x04\x5B\x29\xF2\xFF\xFF\
\x03\x19\x5B\xF0\xFF\xFF\
\x11\x80\x60\x0C\xFF\xFF\
\x11\xC0\x13\xF2\xFF\xFF\
\x11\x1B\x16\x0C\xFF\xFF\
\x10\x2B\x06\xFD\xFF\xFF\
\x11\xE9\xCB\xC1\xF1\xFF\
\x03\x21\x1E\x1C\xFF\xFF\
\x03\x21\x0C\x20\xE2\xFF\
\x11\xD1\x03\x22\x0E\xFF\
\x11\xBB\x92\x61\x0C\xFF\
\x03\x80\x20\x62\xF0\xFF\
\x00\x90\xB0\x21\xF2\xFF\
\x02\x2E\x1C\xFF\xFF\xFF\
\x11\x82\x60\xC2\xF1\xFF\
\x02\x5B\x3C\xCE\xF0\xFF\
\x0B\xB2\x90\xE9\xC0\xFF\
\x02\x2E\x0C\x2E\x0C\xFF\
\x01\x2E\x2C\x20\xF2\xFF\
\x11\xC1\x02\x20\xF2\xFF\
\x02\x0E\x0C\x20\xF2\xFF\
\x0B\x03\x22\x06\xFF\xFF\
\x11\xC2\x01\x22\xFF\xFF\
\x03\x20\x00\x22\xFF\xFF\
\x04\x5B\x29\x19\x5B\xFF\
\x0B\x3A\x59\x99\xF0\xFF\
\x03\x20\x2B\x02\x90\xFF\
\x01\x5C\x3E\xF2\xFF\xFF\
\x11\xC2\xE0\xC1\xF1\xFF\
\x11\x2B\x06\xFC\xFF\xFF\
\x09\xBE\xA9\xAC\xFB\xFF\
\x11\xE5\xC9\x3B\xFC\xFF\
\x03\x21\x99\x80\xB2\xFF\
\x11\x2B\x06\x28\xC6\xFF\
\x0E\x92\xC9\xE0\xFB\xFF\
\x11\x0B\x06\x1C\xFF\xFF\
\x10\xC9\x1B\x1C\xFF\xFF\
\x09\x23\x02\xF8\xFF\xFF\
\x11\xC1\x03\x12\xFF\xFF\
\x0F\xE0\x03\x1C\x5E\xFF\
\x04\x5B\x59\xFF\xFF\xFF\
\x00\x01\x02\x10\xF1\xFF\
\x11\xC0\xE2\xC1\xF1\xFF\
\x11\xC2\xE0\xC0\xFF\xFF\
\x02\xB1\xA5\xB0\xF5\xFF\
\x03\x21\x2E\x1C\xFF\xFF\
\x03\x19\x3A\x49\xF2\xFF\
\x02\x9D\xBC\xFC\xFF\xFF\
\x03\x12\x3C\x1D\xFC\xFF\
\x02\x9D\xAC\x60\xFC\xFF\
\x00\xBD\xB9\xAB\xFD\xFF\
\x02\x9D\xAC\x62\xFC\xFF\
\x02\x90\xB1\x15\xFF\xFF\
\x03\x21\x01\x22\xFF\xFF\
\x03\x92\x09\xB8\xF5\xFF\
\x02\x36\x22\x80\xFF\xFF\
\x03\x92\xB2\x05\xFF\xFF\
\x04\x20\x00\x11\xFF\xFF\
\x04\x90\xB2\xE4\xC0\xFF\
\x03\x22\x01\x20\xF1\xFF\
\x0F\xE5\x24\xF2\xFF\xFF\
\x11\x80\x2B\x99\xFC\xFF\
\x01\x90\xB1\x15\xFF\xFF\
\x03\x3B\x59\x20\xF1\xFF\
\x04\x5B\x1A\x5B\xFF\xFF\
\x10\x2B\x06\x0C\xFC\xFF\
\x10\x9B\xBB\xDA\xFF\xFF\
\x01\x9D\xBC\xFC\xFF\xFF\
\x11\x80\x2B\x19\xC6\xFF\
\x11\xC0\xE1\xC2\xF1\xFF\
\x01\xB1\x95\xF5\xFF\xFF\
\x03\x20\x02\x22\xFF\xFF\
\x00\xB1\xA5\xB0\xF5\xFF\
\x02\x01\x02\x10\xF1\xFF\
\x0B\x67\x1E\xBC\x67\xFF\
\x01\x36\x22\x80\xFF\xFF\
\x02\x20\x29\x5B\xF0\xFF\
\x05\x3C\x0D\xFC\xFF\xFF\
\x03\x92\x09\x18\x5B\xFF\
\x00\x9D\xAC\x62\xFC\xFF\
\x00\x90\xB1\x15\xFF\xFF\
\x00\x9D\xAC\x60\xFC\xFF\
\x02\xBD\xB9\xAB\xFD\xFF\
\x00\x0E\x08\xC6\xF2\xFF\
\x02\xB1\xA5\xB1\xF5\xFF\
\x10\x82\x60\x3D\x22\xFF\
\x04\xB9\x99\x4A\xFF\xFF\
\x03\x22\x00\x21\xF1\xFF\
\x02\x91\x9B\xA9\xF4\xFF\
\x02\x20\x02\x10\x12\xFF\
\x01\x91\x9B\xA9\xF4\xFF\
\x0C\x37\x1B\x59\xB4\xFF\
\x00\x91\x9B\xA9\xF4\xFF\
\x10\xC2\xE2\xD1\xFF\xFF\
\x04\x09\x2B\x22\xF2\xFF\
\x02\x2D\x2C\x1E\xFD\xFF\
\x00\xB1\xA5\xB2\xF5\xFF\
\x0F\xE4\x24\x29\xFB\xFF\
\x04\x5B\x2A\x5B\xFF\xFF\
\x00\x2D\x2C\x1E\xFD\xFF\
\x02\xB1\xA5\xB2\xF5\xFF\
\x00\x36\x22\x80\xFF\xFF\
\x11\xC2\x02\x20\xF1\xFF\
\x05\xC2\xE3\x22\x01\xFF\
\x00\xB1\x95\xF5\xFF\xFF\
\x02\x00\x22\x20\xF2\xFF\
\x04\x5B\x0A\x5B\xFF\xFF\
\x05\x3D\x0D\x08\xF6\xFF\
\x00\x0E\x2C\x1E\x1C\xFF\
\x11\x80\x60\x2C\xFF\xFF\
\x10\xC9\x1A\xC6\xFF\xFF\
\x10\xC9\xCB\xFF\xFF\xFF\
\x11\xD0\xE5\x14\xF2\xFF\
\x10\xC9\x2A\xC6\xFF\xFF\
\x03\x19\x5B\xF1\xFF\xFF\
\x10\xC9\x0A\xC6\xFF\xFF\
\x01\xBD\xB9\xAB\xFD\xFF\
\x0E\xE0\xC2\xFC\xFF\xFF\
\x11\x2B\x16\x1C\xFF\xFF\
\x00\x0E\x1C\xFF\xFF\xFF\
\x02\x1E\x1C\x20\xF2\xFF\
\x00\x90\x09\xB8\x15\xFF\
\x00\x1D\x0C\x0E\xFD\xFF\
\x03\x91\xB1\xF5\xFF\xFF\
\x0E\x56\x02\x05\xF9\xFF\
\x01\x10\x29\x5B\xFF\xFF\
\x03\x00\x83\x99\x48\xFF\
\x02\x2E\x28\x06\xFC\xFF\
\x03\x22\x5C\x4E\x21\xFF\
\x03\x19\x5B\x0E\xFC\xFF\
\x11\xD0\x03\x22\x0E\xFF\
\x01\x3B\x29\x5B\xF9\xFF\
\x01\x20\x09\x2B\x22\xFF\
\x11\x1B\x06\xFC\xFF\xFF\
\x11\xC2\x00\x22\xFF\xFF\
\x05\x3C\x3E\x22\xFF\xFF\
\x02\xBE\x62\xC1\xF1\xFF\
\x03\x99\x80\x5B\xF1\xFF\
\x10\xC1\xE0\xD0\xFF\xFF\
\x11\xC0\xF1\xFF\xFF\xFF\
\x11\x23\x08\x56\xFC\xFF\
\x00\x3B\x29\x5B\xF9\xFF\
\x00\x20\x09\x2B\x22\xFF\
\x00\x10\x29\x5B\xFF\xFF\
\x0B\xA3\x92\xA0\x59\xFF\
\x02\x90\xB1\xE5\xC0\xFF\
\x0B\xB7\xB4\xA4\x67\xFF\
\x03\x00\x90\xB2\xF4\xFF\
\x06\x95\x09\x28\x3B\xF5\
\x02\x0E\x1C\xFF\xFF\xFF\
\x00\x1E\x1C\x20\xF2\xFF\
\x02\xBE\x61\xC0\xFF\xFF\
\x02\x2E\x0C\x20\xF2\xFF\
\x10\x8A\x68\xD8\xF1\xFF\
\x02\x1D\x0C\x0E\xFD\xFF\
\x0F\xE6\xC1\xE8\xFF\xFF\
\x01\xBE\x62\xC1\xF1\xFF\
\x00\x2E\x28\x06\xFC\xFF\
\x11\x93\xB0\x22\x2C\xFF\
\x0E\x93\xB2\x95\xFF\xFF\
\x03\x92\xB0\x22\xF2\xFF\
\x00\x20\x29\x1B\x12\xFF\
\x03\x81\x33\x8B\x46\xFF\
\x03\x91\xB2\xF5\xFF\xFF\
\x11\xC2\x9C\x80\xB2\xFF\
\x02\x10\xF2\xFF\xFF\xFF\
\x01\x5C\x3E\xF1\xFF\xFF\
\x01\x10\xF2\xFF\xFF\xFF\
\x00\x5C\x3E\xF1\xFF\xFF\
\x00\x10\xF2\xFF\xFF\xFF\
\x0F\xE5\x13\xFF\xFF\xFF\
\x03\x21\xFF\xFF\xFF\xFF\
\x02\x5C\x3E\xF1\xFF\xFF\
\x02\x0E\x2C\x10\x22\xFF\
\x11\x81\x61\xC2\xF1\xFF\
\x01\x0E\x2C\x10\x22\xFF\
\x02\x1E\x18\x26\x1C\xFF\
\x00\x0E\x2C\x10\x22\xFF\
\x01\x1E\x18\x26\x1C\xFF\
\x11\xC0\x02\x21\xF2\xFF\
\x00\x1E\x18\x26\x1C\xFF\
\x00\x0B\x2E\xCC\xFF\xFF\
\x00\xBE\x62\xC1\xF1\xFF\
\x01\x0E\x1C\xFF\xFF\xFF\
\x11\xC1\x01\x22\xFF\xFF\
\x00\x10\x19\x5B\xFF\xFF\
\x01\x2E\x0C\x20\xF2\xFF\
\x01\x90\x09\xB8\x15\xFF\
\x10\xC8\xE0\xD6\xF0\xFF\
\x02\x10\x29\x5B\xFF\xFF\
\x09\x55\x6C\x38\xF1\xFF\
\x11\x82\x62\xC0\xFF\xFF\
\x11\x2B\x0B\x29\x06\xFC\
\x02\x3B\x29\x5B\xF9\xFF\
\x0F\xE5\x23\x20\x22\xFF\
\x03\x92\xB2\x21\xF1\xFF\
\x11\x82\x62\x80\x62\xFC\
\x09\x02\x80\xF5\xFF\xFF\
\x01\x1E\x08\xC6\xFF\xFF\
\x01\x20\x12\xFF\xFF\xFF\
\x03\x90\xB0\x22\xFF\xFF\
\x01\x20\x02\x1E\x0C\xFF\
\x01\x1E\xFC\xFF\xFF\xFF\
\x00\x90\xB1\x22\xFF\xFF\
\x09\xBE\x60\xBC\xFF\xFF\
\x03\x09\x1B\x12\xFF\xFF\
\x11\xE2\x98\xBB\xD6\xFF\
\x03\x21\xE1\xC0\xFF\xFF\
\x03\x09\x26\x08\x2B\xF2\
\x00\x10\x19\x0B\x12\xFF\
\x02\xC2\xE3\xF1\xFF\xFF\
\x00\x00\x22\x0E\xFC\xFF\
\x11\x80\x62\xC0\xF0\xFF\
\x03\x19\x2B\xF2\xFF\xFF\
\x02\xE6\x0B\xC6\xFB\xFF\
\x02\x26\x00\x58\xFF\xFF\
\x00\x1E\x08\xC6\xFF\xFF\
\x00\x20\x02\x1E\x0C\xFF\
\x00\x1E\xFC\xFF\xFF\xFF\
\x00\x20\x12\xFF\xFF\xFF\
\x02\x00\x09\x2B\xF2\xFF\
\x03\x20\xE2\xC0\xFF\xFF\
\x02\x0E\x28\x06\x0C\xFF\
\x02\x90\xB0\x21\xF1\xFF\
\x03\x90\xB2\x22\xF1\xFF\
\x03\x91\xB1\x20\xF1\xFF\
\x01\xC2\xE3\xF1\xFF\xFF\
\x02\x10\x12\x0E\xFC\xFF\
\x03\xBE\x62\xC0\x05\xFF\
\x03\x22\xF1\xFF\xFF\xFF\
\x11\xE2\x82\x60\xFD\xFF\
\x11\x81\x61\xFC\xFF\xFF\
\x01\xE6\x0B\xC6\xFB\xFF\
\x03\x22\xE0\xC1\xF0\xFF\
\x11\xC1\xFF\xFF\xFF\xFF\
\x05\x35\x21\x33\xFF\xFF\
\x11\x81\x60\xFC\xFF\xFF\
\x03\x0E\x29\xEC\xF5\xFF\
\x08\xBC\x2B\x09\xE6\xF6\
\x09\xC8\xE0\x26\xF8\xFF\
\x01\x0E\x28\x06\x0C\xFF\
\x02\x10\x19\x0B\x12\xFF\
\x00\xC2\xE3\xF1\xFF\xFF\
\x01\x90\xB0\x21\xF1\xFF\
\x03\x80\xB5\x92\x60\xFF\
\x04\x21\x02\x12\xFF\xFF\
\x0C\x67\x9D\xAD\xB7\xFF\
\x02\x11\x22\x20\xF1\xFF\
\x03\x12\x2E\x0C\x20\xFF\
\x04\x53\x02\x45\xF2\xFF\
\x03\x90\xB0\x92\xB0\xF5\
\x00\x11\x22\x20\xF1\xFF\
\x11\xE1\x8C\x66\xED\xFF\
\x11\xBB\x92\xC9\xF1\xFF\
\x00\xBE\x61\x3C\x22\xFF\
\x02\xBE\x2B\x99\x1C\xFF\
\x11\x1B\xC6\x23\xF2\xFF\
\x01\xBE\x2B\x99\x1C\xFF\
\x11\xC0\x01\x20\xF1\xFF\
\x04\x6A\x89\x49\xF1\xFF\
\x02\x0E\x1C\x00\x12\xFF\
\x09\x88\x60\x86\xFF\xFF\
\x02\x1E\x08\xC6\xFF\xFF\
\x02\x20\x12\xFF\xFF\xFF\
\x00\x00\x09\x2B\xF2\xFF\
\x01\x90\xB1\x22\xFF\xFF\
\x00\xE6\x0B\xC6\xFB\xFF\
\x02\x20\x02\x1E\x0C\xFF\
\x02\x1E\xFC\xFF\xFF\xFF\
\x00\x90\xB0\x21\xF1\xFF\
\x11\xAC\x80\x72\xEC\xFF\
\x00\x10\x12\x0E\xFC\xFF\
\x11\xC0\xC5\xD3\xC1\xFF\
\x01\x00\x22\x0E\xFC\xFF\
\x05\x3C\x0E\x0E\x0C\xFF\
\x01\x10\x19\x0B\x12\xFF\
\x05\x3C\x1E\xFF\xFF\xFF\
\x0E\xC5\xE3\xFC\xFF\xFF\
\x11\x1B\xC6\x00\x22\xFF\
\x11\x81\x60\xC0\xFF\xFF\
\x0F\x6E\x53\xCE\xFF\xFF\
\x05\x3C\x00\x22\xFE\xFF\
\x0E\xC3\xE4\x95\xFF\xFF\
\x02\x00\x12\x20\x12\xFF\
\x02\x0E\x1C\x20\xF2\xFF\
\x11\xC2\x01\x22\xF2\xFF\
\x10\x21\x3C\xD1\xF0\xFF\
\x09\x5E\x3C\xBC\xF0\xFF\
\x00\xCD\x68\xD6\xFE\xFF\
\x02\x0C\x20\xE1\x23\xFF\
\x09\x55\x6C\x38\xF0\xFF\
\x02\x1E\x28\x06\xFC\xFF\
\x0F\xE5\x14\x29\x5B\xF1\
\x01\x10\x22\xFF\xFF\xFF\
\x11\x80\x62\xC0\xF1\xFF\
\x03\x22\xE0\xC0\xF1\xFF\
\x0F\x00\x22\x1E\xFF\xFF\
\x11\x82\x61\xC1\xF1\xFF\
\x11\x80\x60\xC0\xFF\xFF\
\x01\x10\x29\x2B\xF2\xFF\
\x01\x3B\x5C\x5E\x29\xFF\
\x00\x90\xB2\xF5\xFF\xFF\
\x02\x2E\x08\x26\x0C\xFF\
\x0B\xB2\x90\xF9\xFF\xFF\
\x0B\x5B\x3B\x39\x99\xFF\
\x02\x9E\xBE\x0D\xFF\xFF\
\x04\x83\x99\x48\xFF\xFF\
\x02\x2E\xE6\xDB\xFF\xFF\
\x00\x48\xB3\x68\xF4\xFF\
\x01\x00\x22\xFF\xFF\xFF\
\x11\x81\x61\xC1\xF1\xFF\
\x03\x22\xE2\xC0\xF1\xFF\
\x11\x2B\x06\x1C\xFF\xFF\
\x01\x00\x29\x2B\xF2\xFF\
\x10\xC9\xCB\xF1\xFF\xFF\
\x01\xC6\xE5\x3B\xFF\xFF\
\x09\x08\x2C\x6E\x08\xFF\
\x03\x90\xB2\xF5\xFF\xFF\
\x0B\x47\xB3\x48\x64\xFF\
\x09\x0C\x2E\xF8\xFF\xFF\
\x03\x90\xB2\x0B\x22\xF6\
\x09\x5E\x3D\xBC\xF0\xFF\
\x11\xC0\x01\x22\xF2\xFF\
\x03\xBA\x9B\xB2\x22\xFF\
\x09\x55\x6E\x38\xF0\xFF\
\x01\x20\x22\xFF\xFF\xFF\
\x10\x54\xB9\x6B\xD4\xFF\
\x0E\x93\xB1\x95\xFF\xFF\
\x03\xBE\x62\xC0\x21\xFF\
\x09\x55\x6D\x38\xF0\xFF\
\x02\x00\x22\x1E\xFC\xFF\
\x00\xB1\x95\x22\xF1\xFF\
\x00\xCD\x88\xD6\xFE\xFF\
\x04\x90\xB2\xF4\xFF\xFF\
\x11\xD1\x00\x22\x1E\xFF\
\x05\x65\xBC\x36\xFF\xFF\
\x11\x80\x61\xC1\xF1\xFF\
\x11\xC1\x01\x21\xF2\xFF\
\x02\xB0\x93\x24\xFF\xFF\
\x0C\x60\x82\xEE\xC0\xFF\
\x09\x5E\x3E\xBC\xF0\xFF\
\x00\xFF\xFF\xFF\xFF\xFF\
\x11\x62\xBE\x0C\xFC\xFF\
\x11\xC2\xF0\xFF\xFF\xFF\
\x0E\x22\x00\x19\xFF\xFF\
\x11\xC1\xF0\xFF\xFF\xFF\
\x00\xBE\x60\xFC\xFF\xFF\
\x11\xE9\xCB\xC0\xFF\xFF\
\x11\xC0\xF0\xFF\xFF\xFF\
\x0C\x90\xBB\x29\xFB\xFF\
\x09\x06\x2D\x8E\x17\xF6\
\x02\x3C\x10\xE2\x00\xFF\
\x11\x1B\x1B\x29\x06\xFC\
\x01\x20\x09\x2B\x12\xFF\
\x0F\x61\xBD\xE1\xF1\xFF\
\x09\x5C\x8E\x6D\x38\xF0\
\x09\x56\x3C\x8E\x18\xFF\
\x0F\x5E\x3E\xF9\xFF\xFF\
\x11\xC0\x93\xB0\x22\xFF\
\x11\xC2\xE2\xC0\xFF\xFF\
\x03\x3C\x5B\xCE\xF5\xFF\
\x00\xC6\xE5\x3B\xF2\xFF\
\x11\xC1\x13\x12\xFF\xFF\
\x02\x2E\x2C\x20\x12\xFF\
\x03\x19\x2B\x22\xFF\xFF\
\x02\x20\xE2\xC2\xF1\xFF\
\x11\x80\xB0\x91\xC9\xF0\
\x10\xC9\x0B\x18\xC6\xFF\
\x11\xC1\xBB\x92\x60\xFF\
\x0C\x60\x82\x3B\x22\xFF\
\x11\xC1\x25\x0E\x3C\xFF\
\x02\x00\x22\x9D\xBC\xFC\
\x10\xC9\x0B\xFC\xFF\xFF\
\x11\xC0\x13\x12\xFF\xFF\
\x0F\x23\xE2\x0B\xF6\xFF\
\x11\x2C\x0C\x2B\xFF\xFF\
\x03\x09\x2B\xF2\xFF\xFF\
\x00\x00\x12\xFF\xFF\xFF\
\x04\x09\x2B\xF1\xFF\xFF\
\x0F\xD1\xD2\xE2\xF1\xFF\
\x05\x3C\x2E\xFF\xFF\xFF\
\x11\xC0\x25\x0E\x3C\xFF\
\x11\x0B\x2B\x09\xC6\xFF\
\x03\x20\xE1\xC0\xFF\xFF\
\x0E\x93\x15\x12\xF0\xFF\
\x03\x90\xB2\x20\xF1\xFF\
\x03\x3B\x59\x21\xF1\xFF\
\x01\x20\x29\x5B\xF1\xFF\
\x10\x98\xB9\xD6\xFF\xFF\
\x11\xC0\xE2\xC0\xFF\xFF\
\x11\xC2\x00\x20\xF1\xFF\
\x03\x21\xF1\xFF\xFF\xFF\
\x00\x0E\x2C\x00\x12\xFF\
\x03\x21\xE0\xC2\xF0\xFF\
\x11\x92\xC2\xB0\xF2\xFF\
\x03\x21\xE0\xC1\xF0\xFF\
\x03\x22\x1E\xFC\xFF\xFF\
\x0B\x3B\x5B\x9A\xF2\xFF\
\x0B\x2B\x09\xF6\xFF\xFF\
\x05\xE2\xC0\xF3\xFF\xFF\
\x00\x20\x29\x2B\x12\xFF\
\x00\x20\x22\x0E\xFC\xFF\
\x02\xBE\x62\xC1\xF0\xFF\
\x02\xBE\x62\xC2\xF0\xFF\
\x03\x19\x1B\x22\xFF\xFF\
\x03\x22\x00\x22\xF1\xFF\
\x0C\x7A\x7C\xB6\xF9\xFF\
\x0B\x00\x62\x25\xFF\xFF\
\x00\x20\x09\x2B\xF2\xFF\
\x03\x20\x02\x21\xF1\xFF\
\x04\x5B\x19\x12\xFF\xFF\
\x04\xC1\xE3\x11\xF1\xFF\
\x03\x92\xB2\x25\xFF\xFF\
\x10\xC8\xE0\xD6\xFF\xFF\
\x02\x0E\x08\xC6\xFF\xFF\
\x02\x0E\xFC\xFF\xFF\xFF\
\x02\x9D\xBC\xC0\xF0\xFF\
\x01\xC2\xE3\xF0\xFF\xFF\
\x03\x29\x2B\x12\xFF\xFF\
\x02\x0E\x18\xC6\xFF\xFF\
\x11\x1B\xC6\xF2\xFF\xFF\
\x0F\xE5\x23\x2E\x1C\xFF\
\x00\x8A\x35\x93\x95\xFF\
\x0B\x00\x62\x21\xF2\xFF\
\x03\xBA\x5A\x99\x0B\xFF\
\x0C\xEA\xCB\xBB\xF2\xFF\
\x03\x09\x2B\x09\x5B\xFF\
\x00\x00\x22\x00\x22\xFF\
\x03\x11\x2E\x0C\x20\xFF\
\x11\xC0\x09\x2C\xBE\xFF\
\x11\x81\x60\x3C\x22\xFF\
\x09\xC0\xE2\xFB\xFF\xFF\
\x00\x90\xB0\x20\xF1\xFF\
\x11\xC2\x09\x2C\xBE\xFF\
\x11\x0B\xC6\x23\xF2\xFF\
\x01\x00\x02\x0E\xFC\xFF\
\x03\x99\x80\xB1\x25\xFF\
\x11\x0E\x1C\x00\x92\xFF\
\x11\xC1\x02\x22\xFF\xFF\
\x11\x2B\xB6\xC0\x92\xFF\
\x11\xD0\xE5\x23\xFF\xFF\
\x0F\xE5\x04\x22\xFF\xFF\
\x11\xC2\xE0\xC2\xF1\xFF\
\x02\x00\x02\x0E\x1C\xFF\
\x0F\xE5\x04\x29\x2B\xF2\
\x01\x0E\x3C\x21\xFF\xFF\
\x03\xB9\x99\x5A\xF2\xFF\
\x01\x5C\x3E\xF0\xFF\xFF\
\x03\x92\xB1\x15\xFF\xFF\
\x03\x09\x5B\xF1\xFF\xFF\
\x00\x1E\xE6\xDB\xFF\xFF\
\x05\xC2\x00\xE2\xF2\xFF\
\x01\xB1\x95\x22\xFF\xFF\
\x05\x9D\xBC\x3C\xF2\xFF\
\x0F\xB2\x25\x00\xCE\xFF\
\x0C\xE2\xC0\x2E\xFF\xFF\
\x11\xC0\x02\x22\xFF\xFF\
\x0F\xE5\x23\xFF\xFF\xFF\
\x00\x0E\x2C\x2E\x1C\xFF\
\x02\xE6\x2B\xC6\xFB\xFF\
\x0F\xD5\xC2\x10\x22\xFF\
\x02\x91\xB0\x22\x21\xFF\
\x11\xC2\x93\xB0\x15\xFF\
\x0E\x25\x00\x19\xFF\xFF\
\x03\x19\x3A\x49\xF1\xFF\
\x03\x20\x2E\x1C\xFF\xFF\
\x00\xC2\xD3\xC2\xF1\xFF\
\x01\x5E\x9E\xBC\xC3\xFF\
\x0F\xD1\x62\xAC\x60\xFF\
\x0B\x61\x80\x60\xF2\xFF\
\x11\xE9\xDB\xF1\xFF\xFF\
\x01\x1E\x1C\xFF\xFF\xFF\
\x02\x90\xB0\x25\xFF\xFF\
\x02\x20\xF2\xFF\xFF\xFF\
\x04\xC1\xE4\x11\xFF\xFF\
\x01\x56\x3C\xBE\xFF\xFF\
\x02\x0E\x3C\x20\xF1\xFF\
\x05\x3C\x5E\x3C\x0E\xFF\
\x00\xBE\x62\xC2\xF1\xFF\
\x03\x12\x3C\x0D\xFC\xFF\
\x00\x0E\x08\x06\x1C\xFF\
\x0F\xE5\x14\x22\xFF\xFF\
\x05\x3C\x0E\x0E\xFC\xFF\
\x0B\x00\x62\x05\x0E\xFC\
\x11\xBA\xB3\xA5\xCA\xF2\
\x0B\x8A\x35\x9A\xF2\xFF\
\x05\xB1\x93\x01\xF1\xFF\
\x03\x20\x01\x22\xFF\xFF\
\x03\x91\x09\xB8\xF5\xFF\
\x0B\x8A\x34\x9A\xFF\xFF\
\x03\x91\xB2\x05\xFF\xFF\
\x09\xD6\x78\x60\xFF\xFF\
\x09\x5C\xBE\x23\x20\xF2\
\x00\x2E\x0C\x2E\x0C\xFF\
\x11\xC2\x02\x22\xFF\xFF\
\x00\x1E\x18\x06\xFC\xFF\
\x11\xD1\xE5\x23\xFF\xFF\
\x00\x2E\x1C\xFF\xFF\xFF\
\x00\x0E\x0D\x20\xE2\xFF\
\x00\x5B\x3C\xCE\xF0\xFF\
\x02\x01\x29\x5A\x59\xFF\
\x02\x00\x22\x0E\x1C\xFF\
\x00\x3B\x5B\x35\xA3\xFF\
\x01\x20\x02\x20\xF2\xFF\
\x0F\xB3\x93\xE4\xF2\xFF\
\x0C\xB0\x90\xB1\xF2\xFF\
\x09\x0E\x2C\x28\x20\xF2\
\x03\x21\x00\x21\xF1\xFF\
\x0C\xA0\x48\x93\xFF\xFF\
\x00\x67\x8C\xBE\xBC\xFF\
\x02\xBE\x2B\x19\xC6\xFF\
\x0F\x0E\x20\xE2\x92\xFF\
\x0F\x03\x22\x1E\xFF\xFF\
\x02\xBE\x2B\x99\xFC\xFF\
\x03\xA1\xBB\xB9\xF5\xFF\
\x02\x20\x29\x5B\xFF\xFF\
\x02\xBE\x2B\x29\xC6\xFF\
'

        mtd6 = b'\
\x03\x22\xD1\xC9\xCB\xF2\xFF\
\x05\x8C\x6C\x4D\x22\xF0\xFF\
\x04\x59\x4C\x20\xB2\xE4\xF5\
\x0C\x02\x22\xB1\x00\x22\xF2\
\x07\x26\x0A\x88\x54\x22\xF0\
\x11\x80\x60\xD1\xE5\xF3\xFF\
\x03\x59\x02\x22\x01\xB1\xF5\
\x11\xC0\x11\x5B\x59\xF0\xFF\
\x03\x22\xBE\x62\x2C\x10\xF2\
\x05\xE5\xC0\xE9\x6B\x02\xFF\
\x03\x9A\x82\xB2\x05\xB0\xF5\
\x0F\xE5\x14\x09\x0B\xF2\xFF\
\x0F\x35\x55\xD4\xC0\xF2\xFF\
\x03\x59\x9D\xBC\x3C\xB1\xF5\
\x03\x59\x02\x09\x06\xA8\xF5\
\x03\x99\x80\x0B\x12\x00\xF2\
\x05\xC5\x03\x2C\x5E\x33\xFF\
\x11\xD5\x2B\x0E\x3D\x9E\xFD\
\x11\xBA\x90\x60\x2C\x9E\xFC\
\x11\xBB\x92\x29\x1C\x2E\xFC\
\x0F\xE6\xC0\xD8\xE9\xDB\xF2\
\x08\x66\x54\x68\xF4\xFF\xFF\
\x04\xB9\x4B\x99\xFB\xFF\xFF\
\x11\xC0\x93\xB0\x05\x1E\xFC\
\x0F\x26\x5B\x39\x20\xE5\xFF\
\x04\x5B\x59\x00\x29\x5B\xF2\
\x10\xB6\xD8\x96\xF8\xFF\xFF\
\x03\xA0\xE2\xA0\xC2\xF5\xFF\
\x0E\x96\xB1\x98\xF1\xFF\xFF\
\x11\xCB\xE0\x2B\x2B\xA9\xFC\
\x07\x80\x9E\x57\x59\x4B\xF2\
\x0F\x36\x22\x3B\x89\xE0\xFF\
\x0B\x99\xBD\x9B\xFD\xFF\xFF\
\x01\x86\x18\x66\xF8\xFF\xFF\
\x03\x1E\x09\x1B\x2C\xF2\xFF\
\x11\xC0\x01\x61\x22\x80\xF2\
\x09\x88\x61\x86\xF1\xFF\xFF\
\x01\x6B\x19\x8B\xF9\xFF\xFF\
\x05\x12\xE5\xC5\x04\x32\xF4\
\x05\x35\x5C\xE5\xEB\x79\xF3\
\x05\x3C\x5D\x8C\xC8\x69\xF3\
\x04\x65\x46\x85\xF6\xFF\xFF\
\x03\xE0\x91\xB2\xC1\xF5\xFF\
\x06\x8B\x6D\x89\xFD\xFF\xFF\
\x0A\x35\x8C\x07\x0B\x19\xF0\
\x03\xCE\x2B\x06\x2C\x5B\xFF\
\x05\x84\x9C\x6C\xE3\x35\xF3\
\x0C\xBB\x94\xB9\xF4\xFF\xFF\
\x10\x9B\xD9\xBB\xF9\xFF\xFF\
\x03\x0E\x2A\x0C\x2A\xF2\xFF\
\x03\x09\x3B\x5B\x2A\x5B\xF2\
\x05\x3D\x0E\xE6\x2B\xE2\xF3\
\x03\x59\xE2\xC0\x03\x5B\xFF\
\x11\xE0\x89\x66\xD7\xF2\xFF\
\x03\x91\xA0\x93\x04\xFF\xFF\
\x05\x5C\xB3\x96\x47\xFE\xFF\
\x03\x5C\x93\xE5\x2E\x8C\x0E\
\x10\xB9\x97\xDB\xC3\xE4\xFF\
\x0E\x00\x22\xE2\x2C\x0C\xFF\
\x0F\xD0\xC9\x0A\x16\xFF\xFF\
\x04\x5B\x9A\x81\x5B\xFF\xFF\
\x02\x00\x22\x00\xF2\xFF\xFF\
\x0E\xB1\xC8\xE4\xA6\x01\x20\
\x10\x61\x7B\xB9\xD1\xC3\xE4\
\x03\x7B\xBE\x7C\x5A\xB1\xFF\
\x02\x20\xB9\x99\x1A\xF2\xFF\
\x05\x3C\x5E\x3C\xFE\xFF\xFF\
\x11\xC0\xE2\xC0\xF2\xFF\xFF\
\x0A\x93\xB3\x5A\x81\x9B\x21\
\x03\x22\x00\x99\x80\x0B\x22\
\x05\xE5\x46\xC4\xE0\x27\xF2\
\x07\x60\x80\x27\x8D\x68\x2D\
\x10\xD5\xB5\x79\x98\x04\x2C\
\x00\x20\x99\x82\xE5\xB3\xC5\
\x0F\xA5\xEA\xC5\xEA\xA3\xF3\
\x04\x3B\x5C\x69\x53\xE3\xFF\
\x03\x61\x12\x80\x12\x21\xF0\
\x04\x6D\xA8\x89\x4D\x00\x21\
\x04\x83\x9A\x48\x00\x21\xFF\
\x00\x2E\x0C\x66\x8C\xC8\xE2\
\x03\x59\x3C\x5B\x0D\x2C\xFF\
\x11\x80\x60\x29\x0C\x1B\xFF\
\x08\x35\x8C\x33\x0D\x2C\xFF\
\x0F\xE0\x55\x6E\x3C\xE2\xFF\
\x11\x27\x02\x40\x6D\x55\xFE\
\x0B\xE1\x7A\xB3\x45\xC8\xFF\
\x00\x0A\x7E\x2C\x7E\x2A\xFC\
\x05\x35\x20\x33\x01\x20\xFF\
\x05\x3C\x9D\x80\x9C\x82\xFF\
\x03\x81\x20\x62\xE1\xC0\xF2\
\x11\xA0\xCB\xE4\xC9\xA4\xF2\
\x05\x4C\x59\x3E\x4B\x3C\xFE\
\x03\x5C\xB2\x95\x03\x5E\xFF\
\x01\x91\x78\xB6\x14\x0C\x2D\
\x08\x81\xB9\x0A\x19\x67\x2E\
\x03\x59\xBE\x61\x4D\x4B\xFE\
\x0F\xE6\xB2\x94\xD1\xD8\xF2\
\x05\x4C\x20\x5E\x3C\xE2\xFF\
\x01\x89\x67\x1B\x0C\x2D\xFF\
\x05\x3C\x7D\x29\x01\x8B\x8D\
\x05\xDE\xC2\xA0\x94\xB2\xF5\
\x11\xC0\xB1\xE0\x92\xC1\xF2\
\x03\x29\x16\x28\x0B\x22\xFF\
\x0F\xE0\xD3\xE5\x02\x5E\xFF\
\x0F\xB2\xE0\x52\x35\x59\x00\
\x08\x5D\xA4\x80\xA2\x38\xFF\
\x0F\xE5\xC3\x96\xB3\x38\x5E\
\x00\xAD\x88\x86\x2C\xFC\xFF\
\x0F\x44\x8B\x89\xE3\xF3\xFF\
\x10\xE8\x57\x45\x5E\xFF\xFF\
\x0C\xE2\xC0\x0E\x00\x22\xFF\
\x02\x6C\x0E\xCC\xB3\x38\x5E\
\x0F\xE4\xD5\xB9\x97\xDB\xFF\
\x03\xA1\xBB\xB9\x20\xF0\xFF\
\x00\x2E\x0C\x2E\xFC\xFF\xFF\
\x0F\xE5\xC3\xE5\xF3\xFF\xFF\
\x07\xB2\x92\x07\x31\x89\x04\
\x00\x20\x99\x82\x5B\x02\x20\
\x03\x04\x2C\x7E\x54\x6C\xF3\
\x05\x12\x5B\x2A\x1B\xFF\xFF\
\x03\x22\x00\x22\xF0\xFF\xFF\
\x04\x5B\x2A\x1B\x22\xFF\xFF\
\x10\x54\xA9\x6B\xD4\xE2\xC1\
\x0C\x01\x7A\x9E\x7C\x59\xFF\
\x03\x22\x8D\xA9\x6B\x1C\x1C\
\x03\x80\x4A\x55\x94\x98\x49\
\x09\xE2\xC0\x80\x03\x22\xFF\
\x03\x21\x12\x6D\xA8\x89\x4D\
\x05\x12\x92\xB0\x95\xB2\xF1\
\x10\xE8\x56\xC5\xE6\xE4\xF5\
\x03\xA1\xE2\xA0\xC2\x21\xF0\
\x11\x93\xC5\x39\x80\x0B\x22\
\x09\x0D\xA7\x35\xA3\x29\xFF\
\x0F\xE0\x69\x8E\x28\x0E\x2C\
\x04\x5B\x29\x3B\x59\x21\xF2\
\x0F\xE0\x03\x1C\x0E\x22\xFF\
\x03\x2C\x02\x00\x1E\x02\xFF\
\x09\x61\x56\x3D\x75\xE1\xC2\
\x0F\x36\xD5\x57\x02\x04\xFC\
\x03\x21\x12\x83\x9A\x48\xFF\
\x05\x12\x19\x6A\x8B\x2A\xF2\
\x05\x02\x4E\x3C\xE0\xC3\xFF\
\x03\x61\x11\xD5\x36\x80\xF2\
\x02\x10\x01\x26\x01\x18\xF2\
\x11\xA0\xC7\xE0\xC7\xA2\xF2\
\x03\x92\xB2\x0B\x22\x16\xFF\
\x05\x60\x02\x03\x8C\xC8\xE2\
\x06\x91\x9B\x2A\x18\x8A\x03\
\x0F\xE5\x81\xA6\x68\x10\x10\
\x05\x4C\x3D\x59\x3D\x4B\xFE\
\x03\x92\xE1\xB0\xC2\x22\xFF\
\x06\xC5\xE4\xE0\xC2\x55\xFF\
\x03\x3C\x5B\x35\xE3\x5C\xFF\
\x03\x09\x4B\x2A\x0E\xDC\xF3\
\x05\xA3\x60\xA2\x37\x6D\xFF\
\x0F\xE5\x04\x26\x02\x28\xFF\
\x0C\x02\x21\x5C\x3E\xB2\xFF\
\x10\xE9\xC5\x8B\x6E\x3E\xFF\
\x00\x2D\x1E\x89\x67\x1B\xFF\
\x03\x5C\x93\xB5\xE8\xC5\xE3\
\x00\x2D\x1E\x91\x78\xB6\x14\
\x0D\x09\xA8\x53\x33\xF4\xFF\
\x02\x31\x89\x44\x2B\x79\xF1\
\x04\x09\x6A\x2A\x89\x4A\xF2\
\x03\x6C\x54\xE5\x24\x01\xFF\
\x05\x7E\x4C\xB1\x9A\x21\xFF\
\x0C\xA3\x98\xB2\xA6\xB5\xF0\
\x05\x02\x8B\x33\x09\xFF\xFF\
\x03\x6A\xAE\x8C\x1B\x1B\x02\
\x0D\x29\x0E\xB8\x60\xBC\xFB\
\x05\x3C\x0E\x2E\xFC\xFF\xFF\
\x10\xE8\xE6\x24\x01\xFF\xFF\
\x11\xC0\xE2\xC0\x01\x20\xFF\
\x0A\x38\x5A\x63\x61\xF0\xFF\
\x0C\x94\xE9\xC1\xAB\xF3\xFF\
\x03\x09\x67\x6E\xC4\x77\x22\
\x05\x8D\x6E\x3E\xFF\xFF\xFF\
\x07\x95\x24\x02\xB2\x43\xFF\
\x03\x22\xF0\xFF\xFF\xFF\xFF\
\x08\x8D\x6A\x8D\x7A\xFF\xFF\
\x0E\x96\x91\xA0\x48\x09\xFF\
\x01\x26\x2D\x0D\xBD\xF2\xFF\
\x0B\x13\x56\xD3\x78\x70\xFF\
\x0B\x14\x21\x21\x21\xF6\xFF\
\x0C\xE1\xC2\xE1\xC2\xB0\xFF\
\x11\x81\xB2\xE9\x9B\xD9\xF2\
\x10\xC4\xE9\xC4\x0B\x2C\xFF\
\x0E\x96\xB2\x98\xF0\xFF\xFF\
\x03\x5C\x3C\x53\xD5\x22\xF0\
\x03\x3D\x3E\x4C\x3E\x5E\xFF\
\x00\x2E\xC2\x88\x9C\x36\xFF\
\x03\x12\x35\x21\x33\xF2\xFF\
\x03\x59\x3E\x5B\xFC\xFF\xFF\
\x00\x8D\x2C\x6E\xFD\xFF\xFF\
\x00\x1C\xBD\x62\x3D\x20\xFE\
\x0F\x96\xB3\x38\x2E\x02\xFF\
\x00\xA7\x55\xA3\x2A\xD6\xFB\
\x04\x6A\x67\x77\x4A\xF2\xFF\
\x11\xC1\xE2\x0C\x0B\x19\xEC\
\x00\x5C\x1E\x3B\x19\x21\xF2\
\x04\x5D\x3B\x5D\x59\xFF\xFF\
\x03\x82\x45\x16\x78\x26\xFF\
\x0F\x46\x7B\x7C\x89\xFD\xFF\
\x05\xAC\xB3\x13\x92\xD9\xF9\
\x06\x24\x00\x20\x50\xF0\xFF\
\x06\x25\x00\x21\x00\x51\xFF\
\x04\x53\x01\x55\x21\xFF\xFF\
\x04\x3B\x5C\x49\xFE\xFF\xFF\
\x03\xBE\x5C\xE0\xE2\xD9\xFF\
\x05\x22\x61\xD8\x86\x21\xF0\
\x08\xD0\xC6\xC8\x26\x0E\x2D\
\x08\xE5\xE5\xE3\xD5\x34\xFF\
\x11\x9B\xC9\xBB\xF9\xFF\xFF\
\x05\x8D\x2D\x6C\x0E\xF0\xFF\
\x0F\xC5\xB5\xD3\x95\xF4\xFF\
\x0E\xB1\xC8\xE4\xA6\xF2\xFF\
\x03\xAE\x8B\xA9\x2D\xE1\x20\
\x07\x26\x0A\x88\x54\xF5\xFF\
\x07\x95\x23\x00\xB1\x43\xFF\
\x02\x00\xF2\xFF\xFF\xFF\xFF\
\x05\x3C\x0D\x2C\xFF\xFF\xFF\
\x03\x6D\x55\xE5\x02\xE0\xF5\
\x00\x20\x99\x82\x5B\xFF\xFF\
\x11\xE5\x44\xB9\x61\x7B\xE5\
\x0C\xE2\xC0\x02\x22\xB1\xFF\
\x05\x5C\x33\x35\xFE\xFF\xFF\
\x10\xC9\xCB\x01\x21\xFF\xFF\
\x0D\x58\xA3\x62\x82\xF1\xFF\
\x05\xA1\x9B\xA5\xA9\x93\xF1\
\x0A\x94\xB5\x1A\x98\x19\xF2\
\x11\xBB\x91\xC9\x01\x21\xFF\
\x02\x91\xE7\x71\x7C\x2B\xFF\
\x0E\xA2\xB9\x93\xAB\x90\xF5\
\x02\x30\x70\x48\x73\x38\xFF\
\x11\x1B\xA9\xAE\x9B\xFD\xFF\
\x0F\xC8\xE1\xC6\xD1\xFF\xFF\
\x01\xBA\x87\x77\x1A\xF0\xFF\
\x11\x81\x60\x29\x1C\x26\xB8\
\x03\x02\x00\x81\xA6\x68\xF1\
\x11\xE0\x90\xD2\xB0\xF1\xFF\
\x0F\xB6\xE8\x96\xF8\xFF\xFF\
\x11\x05\x28\x10\x16\xFC\xFF\
\x0B\x2B\x19\x20\x96\xB0\x21\
\x03\x09\x09\x0B\x19\x5A\xFF\
\x0F\x97\xB5\x95\xB4\x45\xFE\
\x01\x08\x21\x06\x01\xFF\xFF\
\x01\x29\x0E\x1B\xFC\xFF\xFF\
\x01\x0B\x00\xC2\x92\xE0\xFF\
\x0B\x00\x22\x01\x22\x61\xFF\
\x00\x7E\x92\x12\xB0\xD8\xF8\
\x0B\x01\x22\x02\x62\xF5\xFF\
\x06\x11\x01\x01\x01\xF5\xFF\
\x0E\xC4\xE3\xC4\xE3\x95\xFF\
\x06\x12\x05\xD8\x79\x45\xFF\
\x09\x9D\xBA\x9D\xAA\xFF\xFF\
\x0C\xBB\xB4\xA5\x19\x5B\xFF\
\x04\x35\x3D\x5D\x6D\xF3\xFF\
\x05\xA4\x60\xA2\x37\xD5\xF6\
\x04\x9B\x87\x49\x5E\x3E\xFE\
\x11\xBB\x92\x29\x3C\x20\xFF\
\x05\x60\x02\x80\xF2\xFF\xFF\
\x05\x9D\x3E\xBC\xFD\xFF\xFF\
\x02\x10\x26\x01\x28\xF0\xFF\
\x02\x0E\x2E\x08\xD6\x03\xF2\
\x08\x27\x26\x18\x26\x66\xFF\
\x05\x3C\xE0\x69\x8E\x28\xFF\
\x0C\xBB\x93\xB9\xF5\xFF\xFF\
\x0F\x5B\x60\x87\x62\xE7\xF3\
\x11\x23\x07\x22\x17\x2C\xFF\
\x02\x8B\x35\x59\x00\xFF\xFF\
\x0B\x99\xBE\x2A\x99\xC2\xF0\
\x11\x72\x6B\x54\xA9\xE1\xE2\
\x03\x92\x62\x82\xB0\x21\xFF\
\x11\x80\x60\xC2\xF2\xFF\xFF\
\x02\xA1\x96\x98\x04\xFF\xFF\
\x05\xA2\xCB\xE8\xA9\x03\xF1\
\x03\xC4\xE0\x27\x51\x6E\xF3\
\x05\xC5\x46\x04\x2C\x7E\xF5\
\x03\x22\x00\x22\x00\x22\xF0\
\x11\x71\x72\x6E\x8E\x2E\xFF\
\x03\x22\x2B\xBA\xAB\x82\xF2\
\x06\x8B\x6C\x3A\x8B\xE3\xF5\
\x03\xE2\xE4\x9B\xB1\xD9\x04\
\x03\x99\x80\x0B\x22\xFF\xFF\
\x0F\xE5\xE3\xC0\xF2\xFF\xFF\
\x03\xA1\xBB\xB9\x21\xFF\xFF\
\x0C\x01\x3B\x59\x20\xB0\xFF\
\x10\xE9\xC5\xDB\xE3\xC0\xF2\
\x0D\xB7\x91\xB7\xB1\xFF\xFF\
\x03\xAB\x49\xAB\xCC\xE3\xFF\
\x0F\x71\x7A\x7B\xAB\xF1\xFF\
\x00\x9E\x80\x69\x88\x1B\xFC\
\x11\xC5\x88\x9C\x46\x22\xF0\
\x0E\x46\x95\xB6\x94\xF8\xFF\
\x11\x70\x3B\xA9\x5B\xCC\xF2\
\x10\xC8\xE1\xC6\xC2\xF2\xFF\
\x0C\xD2\xD2\xD2\xD1\xFE\xFF\
\x08\x60\x9E\x78\xC6\xE6\xF2\
\x08\x54\x08\x2D\x76\x22\xF0\
\x0F\xC5\xC3\xD5\x03\xC6\x2B\
\x11\x93\xD5\xB3\xE4\xF3\xFF\
\x0F\xC4\xE9\xC4\xDB\xFF\xFF\
\x00\x2E\x6D\x39\x8B\xE3\xF5\
\x11\xD0\xB6\x94\xD8\xC0\xF0\
\x0E\x94\xA2\xCA\xE8\xAA\xF0\
\x0F\xE0\x69\x8E\x18\x00\xF2\
\x11\x44\xAA\xA9\x79\xF4\xFF\
\x05\x3C\x61\xBC\x2E\x2C\xFE\
\x0D\x9A\xB4\x9A\x94\xFF\xFF\
\x02\x79\x1B\x79\xEE\xC2\xFF\
\x11\xC0\xD2\xC8\xE0\xD6\xF2\
\x05\x3C\xBD\x2B\x99\xC2\xF0\
\x0F\xD5\x9B\xB1\xD9\xE5\xF5\
\x0C\xB1\xA3\xE7\xC9\xA7\xF5\
\x11\xE1\xC8\xE1\xD6\xFF\xFF\
\x0F\x56\xE5\x12\x20\x22\x20\
\x0F\xB2\xD0\x92\xC1\xF2\xFF\
\x03\x80\x82\x9A\x0B\x9B\xF5\
\x09\x61\x56\x3D\x75\x03\xF2\
\x0E\xD3\xD3\xD3\xD4\xFC\xFF\
\x0C\x1B\xB6\x9B\xB1\xF9\xFF\
\x08\x66\x54\x68\xE4\xC0\xF2\
\x10\xE9\xC4\xEB\xE3\xF3\xFF\
\x07\x6A\x8D\x6A\x6D\xFF\xFF\
\x00\x52\x13\x32\x04\xF2\xFF\
\x0B\x99\xBD\x9B\x2D\x00\xF2\
\x00\xA1\x77\x78\xA8\xF4\xFF\
\x0B\xBD\x3B\x21\xA9\xE5\xF3\
\x11\x2A\x1B\x29\x2B\xA9\xFC\
\x05\x4C\x02\x53\x10\x35\xFE\
\x05\x22\x10\xB2\x58\x93\x20\
\x06\x4B\x89\x6B\x54\xF9\xFF\
\x0F\x97\xB3\x55\x53\xE5\xF3\
\x0B\x93\x92\xAB\x09\x26\xF2\
\x03\x22\x3B\x5B\x35\xA3\xF0\
\x05\x73\x48\x73\x28\x02\xFF\
\x02\x21\x08\x21\x16\xFF\xFF\
\x01\x29\x0D\x2B\x2C\xFC\xFF\
\x03\x92\xB3\x66\xBB\x48\xF0\
\x06\x15\x12\x12\x51\xF1\xFF\
\x08\x6D\x45\x0A\x28\x7A\xF3\
\x04\x3C\x64\xB2\x80\xE7\xF5\
\x0F\x96\xB3\x38\x5E\xFF\xFF\
\x05\xC2\xE3\x22\x5B\x19\xF0\
\x07\x87\x34\x87\x54\xFF\xFF\
\x08\xD6\x6B\x86\x6D\xF8\xFF\
\x00\x0D\x29\x0D\x1B\xFF\xFF\
\x03\x29\x4B\xDE\xC2\xA0\xF3\
\x0F\xD5\xD8\xB8\x70\x92\x37\
\x05\x85\x9E\xE6\xC3\xFF\xFF\
\x0F\xB4\xE3\x95\xC4\xE5\xF3\
\x01\x08\x21\x06\x02\xF2\xFF\
\x02\x6C\x1E\x8C\x2D\xFC\xFF\
\x05\x2A\x0E\xDC\x94\xB0\xF5\
\x08\x08\xC6\x88\x2C\x9E\xF7\
\x05\x0C\x01\x86\x6D\x18\xE1\
\x0F\xA8\xD6\xA8\x06\x2C\xFF\
\x0C\xBB\x94\xB9\x04\x2E\xFC\
\x0F\xC0\xD2\x60\xC6\x88\xC2\
\x0F\xE5\xC3\xE5\xC3\xE5\xF3\
\x05\x3C\x0D\x2C\x0E\x2C\xFF\
\x02\xB0\x93\x05\xF2\xFF\xFF\
\x02\xAD\xA7\xA6\x76\xFD\xFF\
\x11\xC0\xE9\xC9\xE6\x78\xF2\
\x08\x1C\x1C\x1C\x6D\xF1\xFF\
\x0F\xE5\xB5\xA5\xB2\x21\xF2\
\x0F\xE4\x24\x29\x1B\xFF\xFF\
\x0F\xE5\x24\x02\x20\x02\xFF\
\x05\x84\x9E\x6C\x6E\x3C\xFE\
\x06\x54\x7C\x27\x09\x77\xFE\
\x0C\x94\xE9\xC1\xCB\x3D\xFE\
\x11\xB2\x92\x72\xAE\x2D\xFF\
\x00\x2E\x2C\x00\xF2\xFF\xFF\
\x05\x3D\x0D\x08\x16\xFF\xFF\
\x11\xC0\x94\xB0\x22\x20\xF2\
\x03\x0A\x16\x08\x06\xA8\xF5\
\x0F\xB3\xB5\x97\x38\xE5\xFC\
\x00\xD6\xD2\xD0\x80\xF1\xFF\
\x10\xC8\xE0\xD6\xF2\xFF\xFF\
\x0F\xE6\xC0\xE8\xF2\xFF\xFF\
\x06\x24\x02\x21\x02\x50\xFF\
\x08\xD4\xC3\xC5\xC3\x33\xFF\
\x03\x10\xB1\x95\xC1\xE3\xF2\
\x0F\xE5\xAE\x49\xAB\x59\xFF\
\x10\xE9\xC4\xEB\xE4\xFF\xFF\
\x00\x0E\x8E\x1C\x6E\xFD\xFF\
\x10\x4E\x5D\x5D\x5D\xF9\xFF\
\x0F\xE0\xC0\xE9\x1B\xE2\xF3\
\x03\x7A\xBE\x7C\x5A\x19\xFB\
\x10\xE1\xC8\xE1\xE6\xFF\xFF\
\x0F\xB2\xE0\x23\x22\x19\xFF\
\x11\x81\x21\x60\x02\xFC\xFF\
\x07\x43\xD8\x69\x12\x05\xFF\
\x03\x22\x0E\xB8\x90\xC9\xFF\
\x00\x66\x8C\xC8\x22\x3E\xFF\
\x05\xB1\x93\x03\x5C\x0E\xF0\
\x0F\xD9\x99\x45\xB3\xFA\xFF\
\x10\xEB\xE9\x97\xB5\xF7\xFF\
\x0B\x81\x67\x81\x77\xFF\xFF\
\x03\x60\x22\x80\xF2\xFF\xFF\
\x0C\xB3\x92\xB5\xF0\xFF\xFF\
\x0F\x14\x86\x6D\x28\x21\x3E\
\x0D\xCB\xE7\x99\x94\xF3\xFF\
\x10\x36\x64\x57\x83\xD7\xF5\
\x04\x59\x21\x01\xB1\xF5\xFF\
\x0F\xD5\xC7\xE0\xC7\x02\xFF\
\x0F\xD5\xCB\xE4\xC9\xF5\xFF\
\x11\xC5\x88\x9C\x36\xFF\xFF\
\x05\x53\xB1\x96\x99\x7B\x11\
\x05\x9D\x86\xAD\x58\x73\xF4\
\x08\x66\x34\x43\xD8\x36\xFF\
\x0F\xE5\x13\x6B\x19\x8B\xF9\
\x03\x81\x20\x62\xF1\xFF\xFF\
\x08\x5C\x5C\x33\x35\x6D\xFF\
\x0A\x6E\x5D\x3E\x8E\xAC\xFF\
\x05\x3D\x0D\x66\x8D\x28\xFF\
\x10\x67\x9A\xAA\xD7\xF5\xFF\
\x09\x5E\x3C\x5D\x3C\xBD\xFF\
\x0B\x13\x06\x08\x56\x02\x21\
\x05\x8D\x86\x78\x3D\xFF\xFF\
\x03\x92\xB2\x21\xFF\xFF\xFF\
\x06\x7C\x68\x55\x76\x8E\xF3\
\x03\xE0\x12\xC5\x46\x5D\xFE\
\x09\x5D\x3C\x5C\xBC\xF3\xFF\
\x11\xE5\x94\x1B\xB6\xE4\xF3\
\x11\xC0\x02\x22\xF0\xFF\xFF\
\x0F\xE5\xF3\xFF\xFF\xFF\xFF\
\x11\x72\x46\x8A\x07\xE1\xFF\
\x02\x1E\x2B\x29\x2B\x2C\x19\
\x11\xC0\x8D\x4C\x6E\x19\xF9\
\x05\xE5\xE8\xE6\xD8\x37\xFF\
\x06\x8B\x8D\x7E\x49\xE5\xFF\
\x05\x35\x20\x33\xF2\xFF\xFF\
\x05\x4C\x54\x02\x54\xE0\xFF\
\x00\x2D\x8C\xE0\xE6\xD8\x26\
\x0E\x58\x43\x5C\x69\x53\xE4\
\x06\x22\x20\x22\x10\xF5\xFF\
\x0C\x91\xB7\x91\xA7\xFF\xFF\
\x05\x4C\x59\x3D\x5B\xFC\xFF\
\x05\x3C\x1E\x86\x18\x66\xF8\
\x04\xB4\xBA\xAA\x47\xFC\xFF\
\x03\x3C\xBD\x19\x9B\x3D\xFE\
\x03\x72\x35\xD5\x53\x18\xF8\
\x10\x9B\xCA\xBA\x61\xFC\xFF\
\x11\x91\xC2\xB0\xF1\xFF\xFF\
\x11\xB2\xC0\x92\xF0\xFF\xFF\
\x0F\xC5\xC3\xB4\x79\x98\xF4\
\x08\x08\x18\x06\x08\x67\xFF\
\x0E\xC3\xE5\xC4\xE5\x94\xFF\
\x03\x5C\x93\xB5\xE8\xFF\xFF\
\x07\xE8\x79\x95\xB5\xF4\xFF\
\x11\x97\x12\xB0\xD8\xF8\xFF\
\x04\x01\x53\x01\x35\xFF\xFF\
\x05\x35\x22\x33\xF0\xFF\xFF\
\x04\x3B\x5D\x39\x3D\xFF\xFF\
\x0B\x0C\x9E\xE6\x87\x62\xF6\
\x10\x6D\x8E\x4A\x6B\x49\xFE\
\x05\x2C\xE1\x71\xB6\x78\x02\
\x02\x4B\x10\x12\x92\xF1\xFF\
\x02\x20\x30\x15\x50\xF4\xFF\
\x04\x35\x3C\x0E\x32\x23\xFF\
\x05\x1D\x6B\x54\x09\x0D\xE0\
\x11\x44\x6B\xAB\xA9\x69\xF4\
\x08\x54\x08\x2D\x76\xF5\xFF\
\x05\x9C\xA3\xDB\xA9\xCB\xFF\
\x03\x91\xC1\xB2\xE0\xF5\xFF\
\x04\x53\x02\x45\xF0\xFF\xFF\
\x03\x22\xE0\xC0\xF2\xFF\xFF\
\x0F\xE4\x24\x8B\x34\x09\xFF\
\x11\xC0\x01\x20\xFF\xFF\xFF\
\x07\x7E\x49\x8B\xD0\x26\xFF\
\x10\x98\xBA\xD6\xE2\xC2\xF2\
\x05\x9D\x69\xBB\xE6\x38\xFE\
\x05\x8D\xBC\x9E\x6E\x3E\xFF\
\x0F\x58\x94\xE8\xB6\x37\xF3\
\x05\x3C\xFE\xFF\xFF\xFF\xFF\
\x08\x0D\x2C\x0D\x2C\x6E\xFF\
\x11\x7A\x93\x45\xC7\x1B\xF6\
\x11\xC0\x23\x99\x82\x5B\xFF\
\x0F\x34\x6B\x79\xE4\xFF\xFF\
\x05\x6D\x87\x4D\xA0\x22\xFF\
\x0A\x6E\x5C\x3C\x8D\xAC\xFF\
\x09\xD4\xC4\xC4\xC4\xFB\xFF\
\x02\x8B\x35\x59\xC0\xE3\xFF\
\x05\x21\x20\x12\x20\x00\xFF\
\x0A\x72\xD6\x88\x13\x56\xFF\
\x02\x00\x5C\x93\xB5\xE8\xFF\
\x05\x85\x9E\xE6\x03\x2C\xFF\
\x03\x3B\x5D\x39\x4D\xFF\xFF\
\x10\xCB\xC0\x02\x9E\x5C\xFF\
\x05\xC2\xE8\xD0\xD6\xF3\xFF\
\x11\xC5\xE5\xC8\x46\xC0\xF2\
\x02\xAA\x6C\xAE\x0A\x4B\xF9\
\x10\x1C\x0D\x0D\x0D\xFB\xFF\
\x10\xC8\xE1\xC6\xC1\xFF\xFF\
\x05\x5C\x9C\x4E\xBC\xFD\xFF\
\x11\xC0\x7C\x1B\x79\x0B\xFF\
\x01\x68\x8A\x16\x22\x02\xF2\
\x0B\x01\x20\x01\x20\x62\xFF\
\x09\xD1\xE2\xE0\xE2\x82\xFF\
\x11\xCB\xE5\xC9\xF3\xFF\xFF\
\x05\xD5\xD3\xD5\x35\xF4\xFF\
\x10\xE9\xC5\xDB\xF3\xFF\xFF\
\x06\x34\x87\x34\x77\xFF\xFF\
\x09\x88\x60\x86\xF2\xFF\xFF\
\x0E\x92\xB3\x90\xF5\xFF\xFF\
\x10\xC6\xC8\xBA\x90\xFA\xFF\
\x0A\x0B\x20\x99\xB2\x95\xF9\
\x11\xD8\xB8\x70\x92\xF7\xFF\
\x03\x25\x6C\x8A\x6E\x5A\xF0\
\x02\x31\x05\x50\xF4\xFF\xFF\
\x09\x88\x81\x72\xD6\x2B\xFF\
\x0F\xE0\x69\x8E\x28\xFF\xFF\
\x11\x2B\x8A\x53\x5D\xA4\xC0\
\x00\x8D\x68\x7D\x06\x78\xF1\
\x11\xD0\xE6\xC1\xE8\xF0\xFF\
\x01\x0B\x01\x21\x91\xF0\xFF\
\x11\xD0\xEA\xC5\xEA\x23\xFF\
\x0D\xE6\xCA\xB8\xB1\xF2\xFF\
\x07\x61\x82\xD7\x68\xD6\xF2\
\x11\x8A\xA3\x35\x16\x16\x2C\
\x10\x8A\x8A\x7A\xD7\xF0\xFF\
\x08\x0C\x2E\x0D\x2E\x6D\xFF\
\x08\xE8\xD9\xE0\x66\xBC\x2D\
\x05\x85\x9D\x36\x0D\x2D\xFF\
\x03\x22\x00\x92\xB2\x21\xFF\
\x07\xBC\x0D\x2C\x9C\x7E\xFF\
\x0F\xE5\x9D\x1E\xBC\x4B\xFB\
\x05\x02\x12\x00\x02\x01\xFF\
\x03\x21\x80\x23\x26\x18\x56\
\x0F\xE5\x23\x00\xF2\xFF\xFF\
\x11\xC0\xF2\xFF\xFF\xFF\xFF\
\x11\x61\xBA\xD1\x43\xE5\xFF\
\x0F\xC0\xB1\x46\x95\xC1\xF2\
\x00\x0E\x0C\x8D\xA9\x6B\xFD\
\x08\x0D\x2E\x0E\x6E\xF2\xFF\
\x0F\x34\x53\xE3\xFF\xFF\xFF\
\x0B\xAE\x86\x60\x78\x9C\xF2\
\x04\x33\x35\x0D\x2D\xFF\xFF\
\x0B\x10\x10\x10\x61\xF4\xFF\
\x09\xBD\x70\x5A\x33\xAA\xF2\
\x02\xB0\x92\x8B\x69\x16\xF2\
\x03\x01\x53\x01\x45\xFF\xFF\
\x04\x3B\x5D\x39\x3E\xFE\xFF\
\x00\x78\x16\x78\x36\x20\xFF\
\x02\x00\x29\x09\x26\xA8\xF5\
\x11\xBA\x92\x60\x62\xC0\xF2\
\x06\xB2\xB3\xA6\x58\x35\xF0\
\x0B\x19\x9B\xB9\x61\xFB\xFF\
\x03\x92\xE1\xB0\xC2\x21\xF0\
\x03\x02\x00\x12\xC0\x36\xE5\
\x05\xA1\x7A\x76\xA6\xF1\xFF\
\x06\x6D\x29\x01\x7B\xC0\xF2\
\x03\x12\x65\xBD\x46\x22\xF2\
\x0A\xBA\x9D\xBA\xBD\xFF\xFF\
\x05\x60\x12\x80\x21\xF0\xFF\
\x06\x8B\x6D\x89\x3D\x22\xF0\
\x09\xD8\x86\x68\xBD\xF6\xFF\
\x05\x5D\x3B\x5D\x49\xFF\xFF\
\x0A\x67\x81\x67\x61\xFF\xFF\
\x10\xC0\x9A\x55\xB3\x2A\xFE\
\x11\xBB\x92\x29\x0C\xFF\xFF\
\x0C\xBB\x93\x0A\xB8\x20\xF2\
\x03\x29\x5B\x1E\x2C\x2E\x2C\
\x11\xA9\xDB\xA9\x5B\x3E\xFF\
\x03\xA2\xE9\xAB\xC9\x5B\xF0\
\x09\x56\x75\x9E\xE6\xC3\xF8\
\x03\xA0\x89\x6D\xA8\x01\x00\
\x11\x57\x02\x04\x6D\x53\xFE\
\x11\x91\xC2\xB0\xE1\xC0\xF2\
\x04\x53\x01\x55\x20\xF0\xFF\
\x03\xBE\x4C\x9E\x3D\xFE\xFF\
\x00\x66\x8C\xC8\xE2\xFF\xFF\
\x0F\x56\xD5\x27\x02\x40\xFC\
\x11\xD0\xD9\x99\x45\xB3\x2A\
\x0F\xE5\x94\x09\xB8\x20\xF2\
\x09\x4E\x4E\x4E\xBD\xF4\xFF\
\x03\x7D\xA7\xAB\x7B\xFD\xFF\
\x11\xC0\xE2\xC0\xE2\xC0\xF2\
\x05\x8D\x6E\x3E\x5C\x3E\xFF\
\x03\x92\xB2\x20\xF0\xFF\xFF\
\x11\x92\x90\xBA\x29\xC6\xFE\
\x0F\xE5\xB1\x95\x03\x02\xF0\
\x05\x4C\xB9\x61\x4B\x3C\xFC\
\x05\x3C\x3E\x22\xF0\xFF\xFF\
\x00\xAD\x88\x86\x2D\xFF\xFF\
\x03\xA1\xA0\x53\x33\x03\xFF\
\x05\x02\x8B\x33\x19\x2E\xFC\
\x0B\x61\xAE\x37\x5B\x74\xFC\
\x0E\xB1\xC8\xE4\xE6\x2D\xFC\
\x11\xC0\x01\x20\x02\x20\xFF\
\x11\xC0\x80\x72\xD6\x88\xF2\
\x11\xC1\x01\x3B\x49\xFF\xFF\
\x0C\xE2\xC0\xE1\xC0\xB1\xFF\
\x0F\x23\xD2\x0B\xD6\xE1\xF2\
\x03\x5C\x4C\x5E\x5C\x5D\xFF\
\x0F\x93\xE5\xB3\xF5\xFF\xFF\
\x10\xB6\xE7\x97\x54\xFE\xFF\
\x0F\xB4\xE3\x95\xF4\xFF\xFF\
\x01\x97\x97\xA7\x1A\xFE\xFF\
\x05\x84\x9C\xBC\x9D\x7C\xF3\
\x02\x40\x80\xD0\x62\x46\xF3\
\x0E\xB4\x9A\xB4\xAA\xFF\xFF\
\x00\x1E\x0B\x2D\x09\xFE\xFF\
\x05\x8D\xBE\x56\x65\x46\xFE\
\x10\xE6\xE0\xE8\xE6\xD8\xE2\
\x0B\x03\x02\x00\x12\xF6\xFF\
\x05\x12\x55\x53\x55\x20\x43\
\x0F\xB2\xE0\x92\xF0\xFF\xFF\
\x03\x0E\x2A\x0C\x1A\x02\xFF\
\x03\x19\xA8\x93\x94\xB9\xFF\
\x01\x29\x0D\x2B\x2D\xFF\xFF\
\x05\x53\x01\x55\x11\xFF\xFF\
\x05\x65\x36\x85\xF6\xFF\xFF\
\x0A\xC6\x78\xB0\x90\xF1\xFF\
\x0F\xBA\x13\x92\xD9\xF9\xFF\
\x02\x0E\xB8\x90\xC9\xFF\xFF\
\x00\x8E\xA2\xD6\xA8\xE6\xFF\
\x03\x2C\x09\x1E\x1B\xF2\xFF\
\x01\x08\x20\x16\xF2\xFF\xFF\
\x09\x61\x56\x3D\x75\xF0\xFF\
\x03\x3C\x7D\x98\xB1\x79\x3C\
\x0F\x71\xB9\x79\x7B\xBB\xF1\
\x03\x02\x82\x10\x62\xF1\xFF\
\x00\x52\x23\x5C\x5E\x43\xFF\
\x03\x19\x12\x10\xB0\xF4\xFF\
\x11\xC5\x88\xAC\x36\x85\xF6\
\x10\xBD\x9C\x1A\xB9\x1B\xFC\
\x11\xE9\x54\x66\x69\xAB\xD4\
\x00\x8D\xBB\x69\xC8\x29\xFC\
\x0A\xAC\x1B\x99\xD5\x3B\xFF\
\x0F\xD3\x54\x6E\x04\x2C\xF2\
\x11\xC1\x01\x90\xB1\x25\xFF\
\x0F\xE5\x24\x02\xFF\xFF\xFF\
\x0F\xC5\xE8\xE6\xF3\xFF\xFF\
\x08\xD1\xE1\xE1\xE1\xF6\xFF\
\x03\x99\x80\x0B\xE2\xC2\xFF\
\x05\xD4\xC6\xC8\xC6\x36\xFF\
\x07\xBC\x0E\x2E\x9D\x7E\xFF\
\x11\x81\xB9\xAB\xC1\xFF\xFF\
\x02\xA2\xD9\x87\x3A\x2D\xFF\
\x0F\x77\xB2\x70\xE7\x46\xF5\
\x0F\xE5\x02\x8B\x33\x09\xFF\
\x09\x5D\x3E\x5D\x3E\xBC\xFF\
\x05\x3C\x5E\x3C\x0D\x2C\xFF\
\x05\x35\x5E\x8E\x6D\x35\xF4\
\x00\x2E\xFC\xFF\xFF\xFF\xFF\
'

        mtd7 = b'\
\x11\xC0\xAC\xBD\x9C\xAC\x2B\
\x0F\xD1\x28\x08\x66\x2D\x2E\
\x08\x1D\x2C\x2E\x6D\x03\x22\
\x11\xBB\x25\x90\xC9\xF0\xFF\
\x0F\x60\x36\x5E\x85\xF2\xFF\
\x03\xAB\xC4\xE6\x4A\x29\xF2\
\x05\x85\xE2\x60\x36\xFC\xFF\
\x0F\x96\x00\xB2\xE8\xF5\xFF\
\x03\x99\x0C\xBE\x5B\xF2\xFF\
\x05\xB2\xE8\xC3\x96\xF0\xFF\
\x03\xB0\x4A\x8C\xAE\x94\xF5\
'

        mtd = (
            mtd0, mtd1, mtd2, mtd3, mtd4, mtd5, mtd6, mtd7
        )

        mtb = (
            3, 4, 4, 5, 5, 6, 7, 7
            )

        MV_MENT = 13

    cube_mtab = cube_mtab1

    print("Using small lookup tables\n")

trace("class solve_map")
class solve_map():

    NSTAGE = cube_mtab.NSTAGE
    NPIECE = cube_mtab.NPIECE

    def __init__(self):
        # Offset into cp/ep tables for each stage
        self.cn    = [-1] * (solve_map.NSTAGE+2)
        self.en    = [-1] * (solve_map.NSTAGE+2)
        self.sz    = [-1] * solve_map.NSTAGE

        # Unrotated corner and edge positions - reverse solve order
        self.cp0   = [-1] * NCORNER
        self.cp1   = [-1] * NCORNER
        self.cp2   = [-1] * NCORNER
        self.ep0   = [-1] * NEDGE
        self.ep1   = [-1] * NEDGE

        self.cn[0] = NCORNER
        self.en[0] = NEDGE

        cube_mtab.init(self)

    def addc(self, s, c0, c1, c2):
        i = self.cn[s]-1
        self.cn[s]  = i
        self.cp0[i] = c0
        self.cp1[i] = c1
        self.cp2[i] = c2

    def adde(self, s, e0, e1):
        i = self.en[s]-1
        self.en[s]  = i
        self.ep0[i] = e0
        self.ep1[i] = e1

    def stage(self, s):
        self.cn[s+1] = self.cn[s]
        self.en[s+1] = self.en[s]
        return s+1

    def send(self, s):
        msg = "STAGE: "+str((s-1))
        idx = 1
        nc  = self.cn[s-1]-self.cn[s]
        msg += " C"+str(nc)
        if nc > 0:
            i = self.cn[s]
            while (i < self.cn[s-1]):
                msg += " ["+str(self.cp0[i])+","+str(self.cp1[i])+","+str(self.cp2[i])+"]"
                idx *= 3*(i+1)
                i += 1
        ne = self.en[s-1]-self.en[s]
        msg += " E"+str(ne)
        if ne > 0:
            i = self.en[s]
            while (i < self.en[s-1]):
                msg += " ["+str(self.ep0[i])+","+str(self.ep1[i])+"]"
                idx *= 2*(i+1)
                i += 1
        if s == solve_map.NSTAGE:
            idx = idx//2
        self.sz[s-1] = idx
        # print(msg+" SZ="+str(self.sz[s-1]))

#-----------------------------------------------------------------------------

trace("class mtab")
class mtab():

    def __init__(self, s):
        self.stage  = s
        self.sz     = sm.sz[s]
        self.nbytes = cube_mtab.mtb[s]
        if hasattr(cube_mtab, "fname"):
            self.fname = cube_mtab.fname
            self.data  = None
            self.foff  = 0
            for i in range(s):
                self.foff += (sm.sz[i]-1)*cube_mtab.mtb[i]
        else:
            self.fname = None
            self.data  = cube_mtab.mtd[s]
        self.fmap = (0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5)
        self.rmap = (1, 2, -1) * NFACE

    def moves(self, i, f, r):
        mv = 0
        if i > 0:
            d = (i-1)*self.nbytes
            if (self.fname != None):
                fs = open(self.fname, "rb")
                fs.seek(self.foff+d)
                self.data = fs.read(self.nbytes)
                fs.close()
                d = 0
            b = self.data[d]
            d += 1
            if b != 0xFF:
                mvm = self.nbytes*2-1
                f0 = self.fmap[b]
                f[mv] = f0
                r[mv] = self.rmap[b]
                mv += 1
                while (mv < mvm):
                    b >>= 4
                    if (mv & 1) != 0:
                        b = self.data[d]
                        d += 1
                    b0 = b & 0xF
                    if b0 == 0xF:
                        break
                    f0 = self.fmap[b0]
                    r[mv] = self.rmap[b0]
                    if f0 >= f[mv-1]:
                        f0 += 1
                    f[mv] = f0
                    mv += 1

        return mv

#-----------------------------------------------------------------------------

trace("class cube_idx")
class cube_idx():

    def __init__(self, m = None):
        self.ci = []
        self.ei = []
        for i in range(NFACE):
            self.ci.append([0] * NFACE)
            self.ei.append([0] * NFACE)
        # pre-allocate for speed
        self.tmp_idx = [0] * solve_map.NPIECE

        self.init(m)

    def init(self, m):
        if m != None:
            for i in range(NCORNER):
                cp0 = sm.cp0[i]
                cp1 = sm.cp1[i]
                cp2 = sm.cp2[i]
                c0  = m.corner(cp0, cp1)
                c1  = m.corner(cp1, cp2)
                c2  = m.corner(cp2, cp0)
                i3  = 3*i
                self.ci[c0][c1] = i3+2
                self.ci[c1][c2] = i3+1
                self.ci[c2][c0] = i3
            # }
            for i in range(NEDGE):
                ep0 = sm.ep0[i]
                ep1 = sm.ep1[i]
                e0  = m.edge(ep0, ep1)
                e1  = m.edge(ep1, ep0)
                i2  = 2*i
                self.ei[e0][e1] = i2+1
                self.ei[e1][e0] = i2
            # }

    def index(self, s):
        idx = self.tmp_idx
        ind = 0
        cs  = sm.cn[s]
        ce  = sm.cn[s+1]
        cn  = cs - ce
        cm  = 3*cs
        for i in range(cn):
            cp0 = sm.cp0[cs-i-1]
            cp1 = sm.cp1[cs-i-1]
            ii  = self.ci[cp0][cp1]
            for j in range(i):
                if ii > idx[j]:
                    ii -= 3
            # }
            idx[i] = ii
            ind = (ind*cm)+ii
            cm  -= 3
        # }
        es = sm.en[s]
        ee = sm.en[s+1]
        en = es - ee
        em = 2*es
        for i in range(en):
            ep0 = sm.ep0[es-i-1]
            ep1 = sm.ep1[es-i-1]
            ii  = self.ei[ep0][ep1]
            for j in range(i):
                if ii > idx[j]:
                    ii -= 2
            # }
            idx[i] = ii
            ind = (ind*em)+ii
            em  -= 2
        # }
        if s == (solve_map.NSTAGE-1):
            # Minimise index when parity known
            if en > 0:
                ind = ((ind//4)*2)+(ind&1)
            else:
                ind = ((ind//6)*3)+(ind%3)
        # }
        sz  = sm.sz[s]
        ind = (sz-1-ind)
        return ind

#-----------------------------------------------------------------------------

import device, motor, color_sensor, distance_sensor, force_sensor
from hub import light, light_matrix, button
from color import BLACK, RED, ORANGE, YELLOW, GREEN, BLUE, WHITE, AZURE

trace("class primecuber")
class primecuber():

    spike_v324     = False

    SCRAMBLED_CUBE = '958475794'
    SOLVED_CUBE    = '999999999'

    SPEED_100      = 1000
    SPEED_85       = 850
    SPEED_80       = 800
    SPEED_70       = 700
    SPEED_50       = 500
    SPEED_40       = 400
    SPEED_30       = 300

    turn_ratio = int(36/12)

    def __init__(self):
        self.count      = 0
        self.scan_speed = self.SPEED_50
        self.slower     = False
        self.c          = cube()
        self.cm         = cm
        self.c.alloc_colors()
        light_matrix.clear()
        self.portscan = True
        while self.portscan:
            time.sleep_ms(100)
            self.portscan = False
            self.sensor_color = self.check_port(hub.port.A, False, [61],     0, 0)
            #self.sensor_dist  = self.check_port(hub.port.C, False, [62],     0, 2)
            self.force_press  = self.check_port(hub.port.C, False, [63],    0, 0)
            self.motor_scan   = self.check_port(hub.port.B, True,  [48, 75], 4, 0)
            self.motor_turn   = self.check_port(hub.port.D, True,  [49, 76], 4, 2)
            self.motor_tilt   = self.check_port(hub.port.F, True,  [48, 75], 4, 4)

    def check_port(self, port, motor, t, x, y):
        if hasattr(device, "device_id"):
            id = device.device_id(port)
            self.spike_v324 = True
        else:
            id = device.id(port)
        if id in t:
            light_matrix.set_pixel(x, y, 0)
        else:
            print("check_port: "+"ABCDEF"[port]+" "+str(id))
            self.portscan = True
            light_matrix.set_pixel(x, y, 100)
        return port

    def Position(self, mot):
        return motor.relative_position(mot)

    def run_nw(self, mot, pos, speed):
        return motor.run_to_relative_position(mot, pos, speed, stop = motor.HOLD)

    def run_to(self, mot, pos, speed):
        wt = motor.run_to_relative_position(mot, pos, speed, stop = motor.HOLD)
        while abs(self.Position(mot)-pos) > 7 or wt.status()[0] == 1:
            time.sleep_ms(1)

    def ScanReset(self):
        self.ColorOff()
        for i in range(2):
            if i > 0:
                motor.set_duty_cycle(self.motor_scan, 3800)
                time.sleep_ms(100)
                motor.stop(self.motor_scan)
                time.sleep_ms(100)
            motor.set_duty_cycle(self.motor_scan, -3800)
            pos1 = self.Position(self.motor_scan)
            pos0 = pos1+100
            while pos1 < pos0:
                time.sleep_ms(100)
                pos0 = pos1
                pos1 = self.Position(self.motor_scan)
        self.motor_scan_base = self.Position(self.motor_scan)+10
        motor.stop(self.motor_scan)

    def ScanPiece(self, pos, f, o, i):
        spos = self.motor_scan_base+pos
        wt = self.run_nw(self.motor_scan, spos, self.SPEED_100)
        self.Display(i)
        pos = self.motor_turn_base+self.turn_ratio*45
        self.motor_turn_base = pos
        pos -= self.turn_ratio*3
        while self.Position(self.motor_turn) < pos:
            time.sleep_ms(1)
        self.ScanRGB(f, o)
        if abs(self.Position(self.motor_scan)-spos) > 5 and wt.status()[0] == 1:
            print(abs(self.Position(self.motor_scan)-spos))
            self.slower = True

    def TurnReset(self):
        self.motor_turn_base = self.Position(self.motor_turn)
        motor.stop(self.motor_turn)

    def TurnRotate(self, rot):
        self.motor_turn_base = self.motor_turn_base+self.turn_ratio*90*rot
        self.run_to(self.motor_turn, self.motor_turn_base, self.SPEED_80)

    def TurnTurn(self, rot, rotn):
        self.TiltHold()
        extra  = self.turn_ratio*21
        extran = self.turn_ratio*2
        if rot < 0:
            extra = -extra
        if rotn < 0:
            extra -= extran
        elif rotn > 0:
            extra += extran
        self.motor_turn_base = self.motor_turn_base+self.turn_ratio*90*rot
        self.run_to(self.motor_turn, self.motor_turn_base+extra, self.SPEED_85)
        time.sleep_ms(20)
        self.run_to(self.motor_turn, self.motor_turn_base, self.SPEED_80)
        time.sleep_ms(20)

    def TiltReset(self):
        motor.set_duty_cycle(self.motor_tilt, 4000)
        pos1 = self.Position(self.motor_tilt)
        pos0 = pos1-100
        while pos1 > pos0:
            time.sleep_ms(100)
            pos0 = pos1
            pos1 = self.Position(self.motor_tilt)
        self.motor_tilt_base = self.Position(self.motor_tilt)-5
        motor.stop(self.motor_tilt)

    def TiltAway(self, o=45):
        #self.Eyes()
        self.run_nw(self.motor_tilt, self.motor_tilt_base, self.SPEED_40)
        pos = self.motor_tilt_base-o
        while self.Position(self.motor_tilt) < pos:
            time.sleep_ms(1)

    def TiltHold(self):
        sleep = self.Position(self.motor_tilt) > self.motor_tilt_base-40
        self.run_to(self.motor_tilt, self.motor_tilt_base-75, self.SPEED_80)
        if sleep:
            time.sleep_ms(100)

    def TiltTilt(self):
        self.TiltHold()
        self.run_to(self.motor_tilt, self.motor_tilt_base-155, self.SPEED_70)
        time.sleep_ms(50)
        self.run_to(self.motor_tilt, self.motor_tilt_base-55, self.SPEED_100)
        self.run_nw(self.motor_tilt, self.motor_tilt_base-75, self.SPEED_70)
        time.sleep_ms(50)

    def ColorOff(self):
        None # REVISIT self.sensor_color

    def ColorOn(self):
        None # REVISIT self.sensor_color

    #def CubeSense(self):
    #    mm = distance_sensor.distance(self.sensor_dist)
    #    return 0 <= mm and mm < 95

    def ForcePress(self):
        return force_sensor.pressed(self.force_press)

    #def CubeRemove(self):
    #    #self.Eyes()
    #    count = 0
    #    while count < 150:
    #        count += 1
    #        if self.CubeSense():
    #            count = 0
    #        time.sleep_ms(10)

    def CubeInsert(self):
        #self.Eyes(0,0,3,3)
        count = 0
        while count < 15:
            count += 1
            # if not self.CubeSense():
            if not self.ForcePress():
                count = 0
            short = True
            start_time = time.ticks_ms()
            if button.pressed(button.LEFT):
                # print("left")
                while button.pressed(button.LEFT):
                    if short and time.ticks_ms() - start_time > 1000:
                        short              = False
                        self.scramble_mode = False
                        self.Show(self.SOLVED_CUBE)
                if short:
                    self.motor_turn_base -= 2*self.turn_ratio
                    self.run_nw(self.motor_turn, self.motor_turn_base, self.SPEED_40)
            if button.pressed(button.RIGHT):
                # print("right")
                while button.pressed(button.RIGHT):
                    if short and time.ticks_ms() - start_time > 1000:
                        short              = False
                        self.scramble_mode = False
                        self.Show(self.SOLVED_CUBE)
                if short:
                    self.motor_turn_base += 2*self.turn_ratio
                    self.run_nw(self.motor_turn, self.motor_turn_base, self.SPEED_40)
            if not short:
                light_matrix.show_image(32)
            time.sleep_ms(10)
        #self.Eyes()

    def Init(self):
        self.scramble_mode = False
        motor.set_duty_cycle(self.motor_tilt, 3000)
        self.ScanReset()
        self.TiltReset()
        self.TurnReset()
        random.seed()

#    def Eyes(self, a=0, b=0, c=0, d=0):
#        distance_sensor.set_pixel(self.sensor_dist, 0, 0, a*9)
#        distance_sensor.set_pixel(self.sensor_dist, 1, 0, b*9)
#        distance_sensor.set_pixel(self.sensor_dist, 0, 1, c*9)
#        distance_sensor.set_pixel(self.sensor_dist, 1, 1, d*9)

    def Show(self, s):
        v = [0]*25
        for i in range(3):
            for j in range(3):
                v[6+i*5+j] = 11*(ord(s[i*3+j])-ord('0'))
        if self.spike_v324:
            light_matrix.show(bytes(v))
        else:
            light_matrix.show(v)

    def Display(self, p):
        self.Show((
                   '009070000', # 0
                   '008075009', # 1
                   '008075994', # 2
                   '908475794', # 3
                   '008079000', # 4
                   '008075094', # 5
                   '008975794', # 6
                   '998475794', # 7
                   '000090000'  # 8
                    )[p])

    def ScanRGB(self, f, o):
        if self.spike_v324:
            rgb = color_sensor.raw_rgbi(self.sensor_color)
        else:
            rgb = color_sensor.rgbi(self.sensor_color)
        self.c.set_rgb(f, o, rgb)
        light.color(light.POWER,
                    (
                     RED, RED, ORANGE, YELLOW, GREEN, GREEN, BLUE, BLUE, WHITE
                    )[self.c.get_clr(f, o)])

    def ScanFace(self, f, o, tilt = True):
        if tilt:
            self.run_nw(self.motor_scan, self.motor_scan_base+100, self.SPEED_100)
            pos = self.motor_scan_base+250
            while self.Position(self.motor_scan) > pos:
                time.sleep_ms(1)
            self.TiltTilt()
        scanning = True
        while scanning:
            # print("FACE "+str(f))
            self.TiltAway(5)
            #self.Eyes(9,9,9,9)
            self.ColorOn()
            self.Display(8)
            self.run_to(self.motor_scan, self.motor_scan_base+485, self.SPEED_100)
            self.ScanRGB(f, 8)
            motor.stop(self.motor_tilt)
            if self.slower:
                self.slower = False
                self.scan_speed -= 7
                print("Scan speed "+str(self.scan_speed))
            motor.run(self.motor_scan, -self.SPEED_100)
            time.sleep_ms(150)
            self.run_nw(self.motor_turn, self.motor_turn_base+self.turn_ratio*360, self.scan_speed)
            for i in range(4):
                self.ScanPiece(300, f, o, i)
                self.ScanPiece(365, f, o+1, i+4)
                o += 2
                if o > 7:
                    o = 0
            scanning = self.slower
        self.ColorOff()
        light_matrix.clear()

    def SolveOrScrambleCube(self):
        light.color(light.POWER, BLACK)
        light_matrix.show_image(32)
        print("Insert cube...")
        scrambled = False
        c = self.c
        while True:
            if self.scramble_mode:
                #self.Eyes()
                c.scramble(2000)
                scrambled = True
            self.CubeInsert()
            if scrambled or not self.scramble_mode:
                break
        light.color(light.POWER, ORANGE)
        light_matrix.show_image(42)
        self.count += 1
        if self.count >= 10:
            self.count = 0
            self.ScanReset()
        ms = time.ticks_ms()
        scan = 0
        found = self.scramble_mode
        while not found and scan < 3:
            ms = time.ticks_ms()
            scan += 1
            self.ScanFace(0, 4, False)
            self.ScanFace(4, 6)
            self.ScanFace(2, 0)
            self.TurnRotate(-1)
            self.ScanFace(3, 6)
            self.TurnRotate(1)
            self.ScanFace(5, 4)
            self.ScanFace(1, 4)
            self.Show(self.SCRAMBLED_CUBE)
            light.color(light.POWER, ORANGE)
            sms = (time.ticks_ms()-ms)//100
            print("SCAN: "+str(sms//10)+"."+str(sms%10)+"s")
            t = -1
            for i in range(12):
                # print("TYPE "+str(i))
                #self.Eyes(5,5,5,5)
                valid = c.determine_colors(i)
                # c.display()
                if valid:
                    t = i
                    # print("Valid: "+str(t))
                    #self.Eyes()
                    valid = c.valid_positions()
                    if valid:
                        found = True
                        break
            if not found and scan == 3 and t >= 0:
                found = c.determine_colors(t)
                # c.display()
                # print("Invalid? "+str(t))
        # }
        if found:
            if self.scramble_mode:
                msg = "SCRAMBLED"
                # REVISIT
                # Cube orientation for scramble (up - white, front - green)
                d = 2
                f = 1
                self.Show(self.SCRAMBLED_CUBE)
            else:
                # print("Solving...")
                msg = "SOLVED"
                #self.Eyes(9,0,9)
                c.solve(2000)
                # c.solve_apply()
                # c.display()
                # Cube orientation after scan
                d = 3
                f = 2
                self.Show(self.SOLVED_CUBE)
            #self.Eyes(5,5)
            light.color(light.POWER, AZURE)
            self.run_to(self.motor_scan, self.motor_scan_base, self.SPEED_100)
            for mv in range(c.mv_n):
                md = c.mv_f[mv]
                mr = c.mv_r[mv]
                # print("Move ["+str(md)+" "+str(mr)+"]")
                # print("["+str(d)+" "+str(f)+"]")
                while d != md:
                    rm = self.cm.get_remap(d, f)
                    if md == rm.fm[2] or md == rm.fm[4]:
                        self.TiltTilt()
                        d = rm.fm[4]
                    elif md == rm.fm[5]:
                        self.TiltAway()
                        #self.Eyes(5,5)
                        self.TurnRotate(2)
                        f = rm.fm[3]
                    elif md == rm.fm[3]:
                        self.TiltAway()
                        #self.Eyes(5,5)
                        self.TurnRotate(1)
                        f = rm.fm[4]
                    else:
                        self.TiltAway()
                        #self.Eyes(5,5)
                        self.TurnRotate(-1)
                        f = rm.fm[5]
                # }
                # print("["+str(d)+" "+str(f)+"]")
                mrn = 0
                mvn = mv+1
                while mvn < c.mv_n:
                    if self.cm.adjacent(c.mv_f[mvn], md):
                        mrn = c.mv_r[mvn]
                        break
                    mvn += 1
                # }
                self.TurnTurn(mr, mrn)
            # }
            ms = (time.ticks_ms()-ms)//100
            print(msg+": "+str(c.mv_n)+" turns "+str(ms//10)+"."+str(ms%10)+"s")
            light.color(light.POWER, GREEN)
            self.TiltAway()
            time.sleep_ms(500)
            self.TiltReset()
            #self.Eyes(9,9,9,9)
            if c.mv_n > 0 and not self.scramble_mode:
                self.TurnRotate(-6)
        # }
        else:
            print("Scan error:")
            c.display()
            self.run_to(self.motor_scan, self.motor_scan_base, 100)
            self.TiltReset()
        while (motor.velocity(self.motor_scan) != 0 or
               motor.velocity(self.motor_turn) != 0 or
               motor.velocity(self.motor_tilt) != 0):
            time.sleep_ms(1)
        motor.stop(self.motor_scan)
        motor.stop(self.motor_turn)
        motor.stop(self.motor_tilt)
        light_matrix.show_image(28)
        print("Remove cube...")
        #self.CubeRemove()

#-----------------------------------------------------------------------------

def main():
    trace("main()")
    pc = primecuber()
    trace("Init()")
    pc.Init()
    while True:
       pc.SolveOrScrambleCube()

#-----------------------------------------------------------------------------

cm = cube_map()
sm = solve_map()
mt = []
for s in range(cube_mtab.NSTAGE):
    mt.append(mtab(s))
trace("initialised maps")

#-----------------------------------------------------------------------------

main()

# END
